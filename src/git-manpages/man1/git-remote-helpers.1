'\" t
.\"     Title: git-remote-helpers
.\"    Author: [see the Documentation section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 04/06/2011
.\"    Manual: Git Manual
.\"    Source: Git 1.7.4.4
.\"  Language: English
.\"
.TH "GIT\-REMOTE\-HELPERS" "1" "04/06/2011" "Git 1\&.7\&.4\&.4" "Git Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-remote-helpers \- Helper programs to interact with remote repositories
.SH "SYNOPSIS"
.sp
\fIgit remote\-<transport>\fR <repository> [<URL>]
.SH "DESCRIPTION"
.sp
Remote helper programs are normally not used directly by end users, but they are invoked by git when it needs to interact with remote repositories git does not support natively\&. A given helper will implement a subset of the capabilities documented here\&. When git needs to interact with a repository using a remote helper, it spawns the helper as an independent process, sends commands to the helper\(cqs standard input, and expects results from the helper\(cqs standard output\&. Because a remote helper runs as an independent process from git, there is no need to re\-link git to add a new helper, nor any need to link the helper with the implementation of git\&.
.sp
Every helper must support the "capabilities" command, which git will use to determine what other commands the helper will accept\&. Other commands generally concern facilities like discovering and updating remote refs, transporting objects between the object database and the remote repository, and updating the local object store\&.
.sp
Helpers supporting the \fIfetch\fR capability can discover refs from the remote repository and transfer objects reachable from those refs to the local object store\&. Helpers supporting the \fIpush\fR capability can transfer local objects to the remote repository and update remote refs\&.
.sp
Git comes with a "curl" family of remote helpers, that handle various transport protocols, such as \fIgit\-remote\-http\fR, \fIgit\-remote\-https\fR, \fIgit\-remote\-ftp\fR and \fIgit\-remote\-ftps\fR\&. They implement the capabilities \fIfetch\fR, \fIoption\fR, and \fIpush\fR\&.
.SH "INVOCATION"
.sp
Remote helper programs are invoked with one or (optionally) two arguments\&. The first argument specifies a remote repository as in git; it is either the name of a configured remote or a URL\&. The second argument specifies a URL; it is usually of the form \fI<transport>://<address>\fR, but any arbitrary string is possible\&.
.sp
When git encounters a URL of the form \fI<transport>://<address>\fR, where \fI<transport>\fR is a protocol that it cannot handle natively, it automatically invokes \fIgit remote\-<transport>\fR with the full URL as the second argument\&. If such a URL is encountered directly on the command line, the first argument is the same as the second, and if it is encountered in a configured remote, the first argument is the name of that remote\&.
.sp
A URL of the form \fI<transport>::<address>\fR explicitly instructs git to invoke \fIgit remote\-<transport>\fR with \fI<address>\fR as the second argument\&. If such a URL is encountered directly on the command line, the first argument is \fI<address>\fR, and if it is encountered in a configured remote, the first argument is the name of that remote\&.
.sp
Additionally, when a configured remote has \fIremote\&.<name>\&.vcs\fR set to \fI<transport>\fR, git explicitly invokes \fIgit remote\-<transport>\fR with \fI<name>\fR as the first argument\&. If set, the second argument is \fIremote\&.<name>\&.url\fR; otherwise, the second argument is omitted\&.
.SH "COMMANDS"
.sp
Commands are given by the caller on the helper\(cqs standard input, one per line\&.
.PP
\fIcapabilities\fR
.RS 4
Lists the capabilities of the helper, one per line, ending with a blank line\&. Each capability may be preceded with
\fI*\fR, which marks them mandatory for git version using the remote helper to understand (unknown mandatory capability is fatal error)\&.
.RE
.PP
\fIlist\fR
.RS 4
Lists the refs, one per line, in the format "<value> <name> [<attr> \&...]"\&. The value may be a hex sha1 hash, "@<dest>" for a symref, or "?" to indicate that the helper could not get the value of the ref\&. A space\-separated list of attributes follows the name; unrecognized attributes are ignored\&. The list ends with a blank line\&.
.sp
If
\fIpush\fR
is supported this may be called as
\fIlist for\-push\fR
to obtain the current refs prior to sending one or more
\fIpush\fR
commands to the helper\&.
.RE
.PP
\fIoption\fR <name> <value>
.RS 4
Sets the transport helper option <name> to <value>\&. Outputs a single line containing one of
\fIok\fR
(option successfully set),
\fIunsupported\fR
(option not recognized) or
\fIerror <msg>\fR
(option <name> is supported but <value> is not valid for it)\&. Options should be set before other commands, and may influence the behavior of those commands\&.
.sp
Supported if the helper has the "option" capability\&.
.RE
.PP
\fIfetch\fR <sha1> <name>
.RS 4
Fetches the given object, writing the necessary objects to the database\&. Fetch commands are sent in a batch, one per line, terminated with a blank line\&. Outputs a single blank line when all fetch commands in the same batch are complete\&. Only objects which were reported in the ref list with a sha1 may be fetched this way\&.
.sp
Optionally may output a
\fIlock <file>\fR
line indicating a file under GIT_DIR/objects/pack which is keeping a pack until refs can be suitably updated\&.
.sp
Supported if the helper has the "fetch" capability\&.
.RE
.PP
\fIpush\fR +<src>:<dst>
.RS 4
Pushes the given local <src> commit or branch to the remote branch described by <dst>\&. A batch sequence of one or more push commands is terminated with a blank line\&.
.sp
Zero or more protocol options may be entered after the last
\fIpush\fR
command, before the batch\(cqs terminating blank line\&.
.sp
When the push is complete, outputs one or more
\fIok <dst>\fR
or
\fIerror <dst> <why>?\fR
lines to indicate success or failure of each pushed ref\&. The status report output is terminated by a blank line\&. The option field <why> may be quoted in a C style string if it contains an LF\&.
.sp
Supported if the helper has the "push" capability\&.
.RE
.PP
\fIimport\fR <name>
.RS 4
Produces a fast\-import stream which imports the current value of the named ref\&. It may additionally import other refs as needed to construct the history efficiently\&. The script writes to a helper\-specific private namespace\&. The value of the named ref should be written to a location in this namespace derived by applying the refspecs from the "refspec" capability to the name of the ref\&.
.sp
Especially useful for interoperability with a foreign versioning system\&.
.sp
Supported if the helper has the "import" capability\&.
.RE
.PP
\fIconnect\fR <service>
.RS 4
Connects to given service\&. Standard input and standard output of helper are connected to specified service (git prefix is included in service name so e\&.g\&. fetching uses
\fIgit\-upload\-pack\fR
as service) on remote side\&. Valid replies to this command are empty line (connection established),
\fIfallback\fR
(no smart transport support, fall back to dumb transports) and just exiting with error message printed (can\(cqt connect, don\(cqt bother trying to fall back)\&. After line feed terminating the positive (empty) response, the output of service starts\&. After the connection ends, the remote helper exits\&.
.sp
Supported if the helper has the "connect" capability\&.
.RE
.sp
If a fatal error occurs, the program writes the error message to stderr and exits\&. The caller should expect that a suitable error message has been printed if the child closes the connection without completing a valid response for the current command\&.
.sp
Additional commands may be supported, as may be determined from capabilities reported by the helper\&.
.SH "CAPABILITIES"
.PP
\fIfetch\fR, \fIoption\fR, \fIpush\fR, \fIimport\fR, \fIconnect\fR
.RS 4
This helper supports the corresponding command with the same name\&.
.RE
.PP
\fIrefspec\fR \fIspec\fR
.RS 4
When using the import command, expect the source ref to have been written to the destination ref\&. The earliest applicable refspec takes precedence\&. For example "refs/heads/\fB:refs/svn/origin/branches/\fR" means that, after an "import refs/heads/name", the script has written to refs/svn/origin/branches/name\&. If this capability is used at all, it must cover all refs reported by the list command; if it is not used, it is effectively "\fB:\fR"
.RE
.SH "REF LIST ATTRIBUTES"
.PP
\fIfor\-push\fR
.RS 4
The caller wants to use the ref list to prepare push commands\&. A helper might chose to acquire the ref list by opening a different type of connection to the destination\&.
.RE
.PP
\fIunchanged\fR
.RS 4
This ref is unchanged since the last import or fetch, although the helper cannot necessarily determine what value that produced\&.
.RE
.SH "OPTIONS"
.PP
\fIoption verbosity\fR <n>
.RS 4
Changes the verbosity of messages displayed by the helper\&. A value of 0 for <n> means that processes operate quietly, and the helper produces only error output\&. 1 is the default level of verbosity, and higher values of <n> correspond to the number of \-v flags passed on the command line\&.
.RE
.PP
\fIoption progress\fR {\fItrue\fR|\fIfalse\fR}
.RS 4
Enables (or disables) progress messages displayed by the transport helper during a command\&.
.RE
.PP
\fIoption depth\fR <depth>
.RS 4
Deepens the history of a shallow repository\&.
.RE
.PP
\fIoption followtags\fR {\fItrue\fR|\fIfalse\fR}
.RS 4
If enabled the helper should automatically fetch annotated tag objects if the object the tag points at was transferred during the fetch command\&. If the tag is not fetched by the helper a second fetch command will usually be sent to ask for the tag specifically\&. Some helpers may be able to use this option to avoid a second network connection\&.
.RE
.sp
\fIoption dry\-run\fR {\fItrue\fR|\fIfalse\fR}: If true, pretend the operation completed successfully, but don\(cqt actually change any repository data\&. For most helpers this only applies to the \fIpush\fR, if supported\&.
.PP
\fIoption servpath <c\-style\-quoted\-path>\fR
.RS 4
Sets service path (\-\-upload\-pack, \-\-receive\-pack etc\&.) for next connect\&. Remote helper may support this option, but must not rely on this option being set before connect request occurs\&.
.RE
.SH "SEE ALSO"
.sp
\fBgit-remote\fR(1)
.SH "DOCUMENTATION"
.sp
Documentation by Daniel Barkalow and Ilari Liusvaara
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
