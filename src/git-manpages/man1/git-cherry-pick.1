'\" t
.\"     Title: git-cherry-pick
.\"    Author: [see the "Author" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 04/06/2011
.\"    Manual: Git Manual
.\"    Source: Git 1.7.4.4
.\"  Language: English
.\"
.TH "GIT\-CHERRY\-PICK" "1" "04/06/2011" "Git 1\&.7\&.4\&.4" "Git Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-cherry-pick \- Apply the changes introduced by some existing commits
.SH "SYNOPSIS"
.sp
\fIgit cherry\-pick\fR [\-\-edit] [\-n] [\-m parent\-number] [\-s] [\-x] [\-\-ff] <commit>\&...
.SH "DESCRIPTION"
.sp
Given one or more existing commits, apply the change each one introduces, recording a new commit for each\&. This requires your working tree to be clean (no modifications from the HEAD commit)\&.
.SH "OPTIONS"
.PP
<commit>\&...
.RS 4
Commits to cherry\-pick\&. For a more complete list of ways to spell commits, see
\fBgitrevisions\fR(7)\&. Sets of commits can be passed but no traversal is done by default, as if the
\fI\-\-no\-walk\fR
option was specified, see
\fBgit-rev-list\fR(1)\&.
.RE
.PP
\-e, \-\-edit
.RS 4
With this option,
\fIgit cherry\-pick\fR
will let you edit the commit message prior to committing\&.
.RE
.PP
\-x
.RS 4
When recording the commit, append to the original commit message a note that indicates which commit this change was cherry\-picked from\&. Append the note only for cherry picks without conflicts\&. Do not use this option if you are cherry\-picking from your private branch because the information is useless to the recipient\&. If on the other hand you are cherry\-picking between two publicly visible branches (e\&.g\&. backporting a fix to a maintenance branch for an older release from a development branch), adding this information can be useful\&.
.RE
.PP
\-r
.RS 4
It used to be that the command defaulted to do
\-x
described above, and
\-r
was to disable it\&. Now the default is not to do
\-x
so this option is a no\-op\&.
.RE
.PP
\-m parent\-number, \-\-mainline parent\-number
.RS 4
Usually you cannot cherry\-pick a merge because you do not know which side of the merge should be considered the mainline\&. This option specifies the parent number (starting from 1) of the mainline and allows cherry\-pick to replay the change relative to the specified parent\&.
.RE
.PP
\-n, \-\-no\-commit
.RS 4
Usually the command automatically creates a sequence of commits\&. This flag applies the changes necessary to cherry\-pick each named commit to your working tree and the index, without making any commit\&. In addition, when this option is used, your index does not have to match the HEAD commit\&. The cherry\-pick is done against the beginning state of your index\&.
.sp
This is useful when cherry\-picking more than one commits\(aq effect to your index in a row\&.
.RE
.PP
\-s, \-\-signoff
.RS 4
Add Signed\-off\-by line at the end of the commit message\&.
.RE
.PP
\-\-ff
.RS 4
If the current HEAD is the same as the parent of the cherry\-pick\(cqed commit, then a fast forward to this commit will be performed\&.
.RE
.SH "EXAMPLES"
.PP
git cherry\-pick master
.RS 4
Apply the change introduced by the commit at the tip of the master branch and create a new commit with this change\&.
.RE
.PP
git cherry\-pick \&.\&.master, git cherry\-pick ^HEAD master
.RS 4
Apply the changes introduced by all commits that are ancestors of master but not of HEAD to produce new commits\&.
.RE
.PP
git cherry\-pick master~4 master~2
.RS 4
Apply the changes introduced by the fifth and third last commits pointed to by master and create 2 new commits with these changes\&.
.RE
.PP
git cherry\-pick \-n master~1 next
.RS 4
Apply to the working tree and the index the changes introduced by the second last commit pointed to by master and by the last commit pointed to by next, but do not create any commit with these changes\&.
.RE
.PP
git cherry\-pick \-\-ff \&.\&.next
.RS 4
If history is linear and HEAD is an ancestor of next, update the working tree and advance the HEAD pointer to match next\&. Otherwise, apply the changes introduced by those commits that are in next but not HEAD to the current branch, creating a new commit for each new change\&.
.RE
.PP
git rev\-list \-\-reverse master \-\- README | git cherry\-pick \-n \-\-stdin
.RS 4
Apply the changes introduced by all commits on the master branch that touched README to the working tree and index, so the result can be inspected and made into a single new commit if suitable\&.
.RE
.SH "AUTHOR"
.sp
Written by Junio C Hamano <\m[blue]\fBgitster@pobox\&.com\fR\m[]\&\s-2\u[1]\d\s+2>
.SH "DOCUMENTATION"
.sp
Documentation by Junio C Hamano and the git\-list <\m[blue]\fBgit@vger\&.kernel\&.org\fR\m[]\&\s-2\u[2]\d\s+2>\&.
.SH "SEE ALSO"
.sp
\fBgit-revert\fR(1)
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
gitster@pobox.com
.RS 4
\%mailto:gitster@pobox.com
.RE
.IP " 2." 4
git@vger.kernel.org
.RS 4
\%mailto:git@vger.kernel.org
.RE
