'\" t
.\"     Title: git-config
.\"    Author: [see the "Author" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 04/06/2011
.\"    Manual: Git Manual
.\"    Source: Git 1.7.4.4
.\"  Language: English
.\"
.TH "GIT\-CONFIG" "1" "04/06/2011" "Git 1\&.7\&.4\&.4" "Git Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-config \- Get and set repository or global options
.SH "SYNOPSIS"
.sp
.nf
\fIgit config\fR [<file\-option>] [type] [\-z|\-\-null] name [value [value_regex]]
\fIgit config\fR [<file\-option>] [type] \-\-add name value
\fIgit config\fR [<file\-option>] [type] \-\-replace\-all name value [value_regex]
\fIgit config\fR [<file\-option>] [type] [\-z|\-\-null] \-\-get name [value_regex]
\fIgit config\fR [<file\-option>] [type] [\-z|\-\-null] \-\-get\-all name [value_regex]
\fIgit config\fR [<file\-option>] [type] [\-z|\-\-null] \-\-get\-regexp name_regex [value_regex]
\fIgit config\fR [<file\-option>] \-\-unset name [value_regex]
\fIgit config\fR [<file\-option>] \-\-unset\-all name [value_regex]
\fIgit config\fR [<file\-option>] \-\-rename\-section old_name new_name
\fIgit config\fR [<file\-option>] \-\-remove\-section name
\fIgit config\fR [<file\-option>] [\-z|\-\-null] \-l | \-\-list
\fIgit config\fR [<file\-option>] \-\-get\-color name [default]
\fIgit config\fR [<file\-option>] \-\-get\-colorbool name [stdout\-is\-tty]
\fIgit config\fR [<file\-option>] \-e | \-\-edit
.fi
.sp
.SH "DESCRIPTION"
.sp
You can query/set/replace/unset options with this command\&. The name is actually the section and the key separated by a dot, and the value will be escaped\&.
.sp
Multiple lines can be added to an option by using the \fI\-\-add\fR option\&. If you want to update or unset an option which can occur on multiple lines, a POSIX regexp value_regex needs to be given\&. Only the existing values that match the regexp are updated or unset\&. If you want to handle the lines that do \fBnot\fR match the regex, just prepend a single exclamation mark in front (see also the section called \(lqEXAMPLES\(rq)\&.
.sp
The type specifier can be either \fI\-\-int\fR or \fI\-\-bool\fR, to make \fIgit config\fR ensure that the variable(s) are of the given type and convert the value to the canonical form (simple decimal number for int, a "true" or "false" string for bool), or \fI\-\-path\fR, which does some path expansion (see \fI\-\-path\fR below)\&. If no type specifier is passed, no checks or transformations are performed on the value\&.
.sp
The file\-option can be one of \fI\-\-system\fR, \fI\-\-global\fR or \fI\-\-file\fR which specify where the values will be read from or written to\&. The default is to assume the config file of the current repository, \&.git/config unless defined otherwise with GIT_DIR and GIT_CONFIG (see the section called \(lqFILES\(rq)\&.
.sp
This command will fail if:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
The config file is invalid,
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Can not write to the config file,
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
no section was provided,
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
the section or key is invalid,
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
you try to unset an option which does not exist,
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
you try to unset/set an option for which multiple lines match, or
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
you use
\fI\-\-global\fR
option without $HOME being properly set\&.
.RE
.SH "OPTIONS"
.PP
\-\-replace\-all
.RS 4
Default behavior is to replace at most one line\&. This replaces all lines matching the key (and optionally the value_regex)\&.
.RE
.PP
\-\-add
.RS 4
Adds a new line to the option without altering any existing values\&. This is the same as providing
\fI^$\fR
as the value_regex in
\-\-replace\-all\&.
.RE
.PP
\-\-get
.RS 4
Get the value for a given key (optionally filtered by a regex matching the value)\&. Returns error code 1 if the key was not found and error code 2 if multiple key values were found\&.
.RE
.PP
\-\-get\-all
.RS 4
Like get, but does not fail if the number of values for the key is not exactly one\&.
.RE
.PP
\-\-get\-regexp
.RS 4
Like \-\-get\-all, but interprets the name as a regular expression\&. Also outputs the key names\&.
.RE
.PP
\-\-global
.RS 4
For writing options: write to global ~/\&.gitconfig file rather than the repository \&.git/config\&.
.sp
For reading options: read only from global ~/\&.gitconfig rather than from all available files\&.
.sp
See also
the section called \(lqFILES\(rq\&.
.RE
.PP
\-\-system
.RS 4
For writing options: write to system\-wide $(prefix)/etc/gitconfig rather than the repository \&.git/config\&.
.sp
For reading options: read only from system\-wide $(prefix)/etc/gitconfig rather than from all available files\&.
.sp
See also
the section called \(lqFILES\(rq\&.
.RE
.PP
\-f config\-file, \-\-file config\-file
.RS 4
Use the given config file instead of the one specified by GIT_CONFIG\&.
.RE
.PP
\-\-remove\-section
.RS 4
Remove the given section from the configuration file\&.
.RE
.PP
\-\-rename\-section
.RS 4
Rename the given section to a new name\&.
.RE
.PP
\-\-unset
.RS 4
Remove the line matching the key from config file\&.
.RE
.PP
\-\-unset\-all
.RS 4
Remove all lines matching the key from config file\&.
.RE
.PP
\-l, \-\-list
.RS 4
List all variables set in config file\&.
.RE
.PP
\-\-bool
.RS 4

\fIgit config\fR
will ensure that the output is "true" or "false"
.RE
.PP
\-\-int
.RS 4

\fIgit config\fR
will ensure that the output is a simple decimal number\&. An optional value suffix of
\fIk\fR,
\fIm\fR, or
\fIg\fR
in the config file will cause the value to be multiplied by 1024, 1048576, or 1073741824 prior to output\&.
.RE
.PP
\-\-bool\-or\-int
.RS 4

\fIgit config\fR
will ensure that the output matches the format of either \-\-bool or \-\-int, as described above\&.
.RE
.PP
\-\-path
.RS 4

\fIgit\-config\fR
will expand leading
\fI~\fR
to the value of
\fI$HOME\fR, and
\fI~user\fR
to the home directory for the specified user\&. This option has no effect when setting the value (but you can use
\fIgit config bla ~/\fR
from the command line to let your shell do the expansion)\&.
.RE
.PP
\-z, \-\-null
.RS 4
For all options that output values and/or keys, always end values with the null character (instead of a newline)\&. Use newline instead as a delimiter between key and value\&. This allows for secure parsing of the output without getting confused e\&.g\&. by values that contain line breaks\&.
.RE
.PP
\-\-get\-colorbool name [stdout\-is\-tty]
.RS 4
Find the color setting for
name
(e\&.g\&.
color\&.diff) and output "true" or "false"\&.
stdout\-is\-tty
should be either "true" or "false", and is taken into account when configuration says "auto"\&. If
stdout\-is\-tty
is missing, then checks the standard output of the command itself, and exits with status 0 if color is to be used, or exits with status 1 otherwise\&. When the color setting for
name
is undefined, the command uses
color\&.ui
as fallback\&.
.RE
.PP
\-\-get\-color name [default]
.RS 4
Find the color configured for
name
(e\&.g\&.
color\&.diff\&.new) and output it as the ANSI color escape sequence to the standard output\&. The optional
default
parameter is used instead, if there is no color configured for
name\&.
.RE
.PP
\-e, \-\-edit
.RS 4
Opens an editor to modify the specified config file; either
\fI\-\-system\fR,
\fI\-\-global\fR, or repository (default)\&.
.RE
.SH "FILES"
.sp
If not set explicitly with \fI\-\-file\fR, there are three files where \fIgit config\fR will search for configuration options:
.PP
$GIT_DIR/config
.RS 4
Repository specific configuration file\&. (The filename is of course relative to the repository root, not the working directory\&.)
.RE
.PP
~/\&.gitconfig
.RS 4
User\-specific configuration file\&. Also called "global" configuration file\&.
.RE
.PP
$(prefix)/etc/gitconfig
.RS 4
System\-wide configuration file\&.
.RE
.sp
If no further options are given, all reading options will read all of these files that are available\&. If the global or the system\-wide configuration file are not available they will be ignored\&. If the repository configuration file is not available or readable, \fIgit config\fR will exit with a non\-zero error code\&. However, in neither case will an error message be issued\&.
.sp
All writing options will per default write to the repository specific configuration file\&. Note that this also affects options like \fI\-\-replace\-all\fR and \fI\-\-unset\fR\&. \fB\fIgit config\fR\fR\fB will only ever change one file at a time\fR\&.
.sp
You can override these rules either by command line options or by environment variables\&. The \fI\-\-global\fR and the \fI\-\-system\fR options will limit the file used to the global or system\-wide file respectively\&. The GIT_CONFIG environment variable has a similar effect, but you can specify any filename you want\&.
.SH "ENVIRONMENT"
.PP
GIT_CONFIG
.RS 4
Take the configuration from the given file instead of \&.git/config\&. Using the "\-\-global" option forces this to ~/\&.gitconfig\&. Using the "\-\-system" option forces this to $(prefix)/etc/gitconfig\&.
.RE
.sp
See also the section called \(lqFILES\(rq\&.
.SH "EXAMPLES"
.sp
Given a \&.git/config like this:
.sp
.if n \{\
.RS 4
.\}
.nf
#
# This is the config file, and
# a \(aq#\(aq or \(aq;\(aq character indicates
# a comment
#
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
; core variables
[core]
        ; Don\(aqt trust file modes
        filemode = false
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
; Our diff algorithm
[diff]
        external = /usr/local/bin/diff\-wrapper
        renames = true
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
; Proxy settings
[core]
        gitproxy="proxy\-command" for kernel\&.org
        gitproxy=default\-proxy ; for all the rest
.fi
.if n \{\
.RE
.\}
.sp
you can set the filemode to true with
.sp
.if n \{\
.RS 4
.\}
.nf
% git config core\&.filemode true
.fi
.if n \{\
.RE
.\}
.sp
.sp
The hypothetical proxy command entries actually have a postfix to discern what URL they apply to\&. Here is how to change the entry for kernel\&.org to "ssh"\&.
.sp
.if n \{\
.RS 4
.\}
.nf
% git config core\&.gitproxy \(aq"ssh" for kernel\&.org\(aq \(aqfor kernel\&.org$\(aq
.fi
.if n \{\
.RE
.\}
.sp
.sp
This makes sure that only the key/value pair for kernel\&.org is replaced\&.
.sp
To delete the entry for renames, do
.sp
.if n \{\
.RS 4
.\}
.nf
% git config \-\-unset diff\&.renames
.fi
.if n \{\
.RE
.\}
.sp
.sp
If you want to delete an entry for a multivar (like core\&.gitproxy above), you have to provide a regex matching the value of exactly one line\&.
.sp
To query the value for a given key, do
.sp
.if n \{\
.RS 4
.\}
.nf
% git config \-\-get core\&.filemode
.fi
.if n \{\
.RE
.\}
.sp
.sp
or
.sp
.if n \{\
.RS 4
.\}
.nf
% git config core\&.filemode
.fi
.if n \{\
.RE
.\}
.sp
.sp
or, to query a multivar:
.sp
.if n \{\
.RS 4
.\}
.nf
% git config \-\-get core\&.gitproxy "for kernel\&.org$"
.fi
.if n \{\
.RE
.\}
.sp
.sp
If you want to know all the values for a multivar, do:
.sp
.if n \{\
.RS 4
.\}
.nf
% git config \-\-get\-all core\&.gitproxy
.fi
.if n \{\
.RE
.\}
.sp
.sp
If you like to live dangerously, you can replace \fBall\fR core\&.gitproxy by a new one with
.sp
.if n \{\
.RS 4
.\}
.nf
% git config \-\-replace\-all core\&.gitproxy ssh
.fi
.if n \{\
.RE
.\}
.sp
.sp
However, if you really only want to replace the line for the default proxy, i\&.e\&. the one without a "for \&..." postfix, do something like this:
.sp
.if n \{\
.RS 4
.\}
.nf
% git config core\&.gitproxy ssh \(aq! for \(aq
.fi
.if n \{\
.RE
.\}
.sp
.sp
To actually match only values with an exclamation mark, you have to
.sp
.if n \{\
.RS 4
.\}
.nf
% git config section\&.key value \(aq[!]\(aq
.fi
.if n \{\
.RE
.\}
.sp
.sp
To add a new proxy, without altering any of the existing ones, use
.sp
.if n \{\
.RS 4
.\}
.nf
% git config core\&.gitproxy \(aq"proxy\-command" for example\&.com\(aq
.fi
.if n \{\
.RE
.\}
.sp
.sp
An example to use customized color from the configuration in your script:
.sp
.if n \{\
.RS 4
.\}
.nf
#!/bin/sh
WS=$(git config \-\-get\-color color\&.diff\&.whitespace "blue reverse")
RESET=$(git config \-\-get\-color "" "reset")
echo "${WS}your whitespace color or blue reverse${RESET}"
.fi
.if n \{\
.RE
.\}
.sp
.SH "CONFIGURATION FILE"
.sp
The git configuration file contains a number of variables that affect the git command\(cqs behavior\&. The \&.git/config file in each repository is used to store the configuration for that repository, and $HOME/\&.gitconfig is used to store a per\-user configuration as fallback values for the \&.git/config file\&. The file /etc/gitconfig can be used to store a system\-wide default configuration\&.
.sp
The configuration variables are used by both the git plumbing and the porcelains\&. The variables are divided into sections, wherein the fully qualified variable name of the variable itself is the last dot\-separated segment and the section name is everything before the last dot\&. The variable names are case\-insensitive and only alphanumeric characters are allowed\&. Some variables may appear multiple times\&.
.SS "Syntax"
.sp
The syntax is fairly flexible and permissive; whitespaces are mostly ignored\&. The \fI#\fR and \fI;\fR characters begin comments to the end of line, blank lines are ignored\&.
.sp
The file consists of sections and variables\&. A section begins with the name of the section in square brackets and continues until the next section begins\&. Section names are not case sensitive\&. Only alphanumeric characters, \- and \&. are allowed in section names\&. Each variable must belong to some section, which means that there must be a section header before the first setting of a variable\&.
.sp
Sections can be further divided into subsections\&. To begin a subsection put its name in double quotes, separated by space from the section name, in the section header, like in the example below:
.sp
.if n \{\
.RS 4
.\}
.nf
        [section "subsection"]
.fi
.if n \{\
.RE
.\}
.sp
.sp
Subsection names are case sensitive and can contain any characters except newline (doublequote " and backslash have to be escaped as \e" and \e\e, respectively)\&. Section headers cannot span multiple lines\&. Variables may belong directly to a section or to a given subsection\&. You can have [section] if you have [section "subsection"], but you don\(cqt need to\&.
.sp
There is also a case insensitive alternative [section\&.subsection] syntax\&. In this syntax, subsection names follow the same restrictions as for section names\&.
.sp
All the other lines (and the remainder of the line after the section header) are recognized as setting variables, in the form \fIname = value\fR\&. If there is no equal sign on the line, the entire line is taken as \fIname\fR and the variable is recognized as boolean "true"\&. The variable names are case\-insensitive and only alphanumeric characters and \- are allowed\&. There can be more than one value for a given variable; we say then that variable is multivalued\&.
.sp
Leading and trailing whitespace in a variable value is discarded\&. Internal whitespace within a variable value is retained verbatim\&.
.sp
The values following the equals sign in variable assign are all either a string, an integer, or a boolean\&. Boolean values may be given as yes/no, 1/0, true/false or on/off\&. Case is not significant in boolean values, when converting value to the canonical form using \fI\-\-bool\fR type specifier; \fIgit config\fR will ensure that the output is "true" or "false"\&.
.sp
String values may be entirely or partially enclosed in double quotes\&. You need to enclose variable values in double quotes if you want to preserve leading or trailing whitespace, or if the variable value contains comment characters (i\&.e\&. it contains \fI#\fR or \fI;\fR)\&. Double quote " and backslash \e characters in variable values must be escaped: use \e" for " and \e\e for \e\&.
.sp
The following escape sequences (beside \e" and \e\e) are recognized: \en for newline character (NL), \et for horizontal tabulation (HT, TAB) and \eb for backspace (BS)\&. No other char escape sequence, nor octal char sequences are valid\&.
.sp
Variable values ending in a \e are continued on the next line in the customary UNIX fashion\&.
.sp
Some variables may require a special value format\&.
.SS "Example"
.sp
.if n \{\
.RS 4
.\}
.nf
# Core variables
[core]
        ; Don\(aqt trust file modes
        filemode = false
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
# Our diff algorithm
[diff]
        external = /usr/local/bin/diff\-wrapper
        renames = true
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
[branch "devel"]
        remote = origin
        merge = refs/heads/devel
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
# Proxy settings
[core]
        gitProxy="ssh" for "kernel\&.org"
        gitProxy=default\-proxy ; for the rest
.fi
.if n \{\
.RE
.\}
.SS "Variables"
.sp
Note that this list is non\-comprehensive and not necessarily complete\&. For command\-specific variables, you will find a more detailed description in the appropriate manual page\&. You will find a description of non\-core porcelain configuration variables in the respective porcelain documentation\&.
.PP
advice\&.*
.RS 4
When set to
\fItrue\fR, display the given optional help message\&. When set to
\fIfalse\fR, do not display\&. The configuration variables are:
.PP
pushNonFastForward
.RS 4
Advice shown when
\fBgit-push\fR(1)
refuses non\-fast\-forward refs\&. Default: true\&.
.RE
.PP
statusHints
.RS 4
Directions on how to stage/unstage/add shown in the output of
\fBgit-status\fR(1)
and the template shown when writing commit messages\&. Default: true\&.
.RE
.PP
commitBeforeMerge
.RS 4
Advice shown when
\fBgit-merge\fR(1)
refuses to merge to avoid overwriting local changes\&. Default: true\&.
.RE
.PP
resolveConflict
.RS 4
Advices shown by various commands when conflicts prevent the operation from being performed\&. Default: true\&.
.RE
.PP
implicitIdentity
.RS 4
Advice on how to set your identity configuration when your information is guessed from the system username and domain name\&. Default: true\&.
.RE
.PP
detachedHead
.RS 4
Advice shown when you used
\fB:git-checkout\fR(1)
to move to the detach HEAD state, to instruct how to create a local branch after the fact\&. Default: true\&.
.RE
.RE
.PP
core\&.fileMode
.RS 4
If false, the executable bit differences between the index and the working copy are ignored; useful on broken filesystems like FAT\&. See
\fBgit-update-index\fR(1)\&.
.sp
The default is true, except
\fBgit-clone\fR(1)
or
\fBgit-init\fR(1)
will probe and set core\&.fileMode false if appropriate when the repository is created\&.
.RE
.PP
core\&.ignoreCygwinFSTricks
.RS 4
This option is only used by Cygwin implementation of Git\&. If false, the Cygwin stat() and lstat() functions are used\&. This may be useful if your repository consists of a few separate directories joined in one hierarchy using Cygwin mount\&. If true, Git uses native Win32 API whenever it is possible and falls back to Cygwin functions only to handle symbol links\&. The native mode is more than twice faster than normal Cygwin l/stat() functions\&. True by default, unless core\&.filemode is true, in which case ignoreCygwinFSTricks is ignored as Cygwin\(cqs POSIX emulation is required to support core\&.filemode\&.
.RE
.PP
core\&.ignorecase
.RS 4
If true, this option enables various workarounds to enable git to work better on filesystems that are not case sensitive, like FAT\&. For example, if a directory listing finds "makefile" when git expects "Makefile", git will assume it is really the same file, and continue to remember it as "Makefile"\&.
.sp
The default is false, except
\fBgit-clone\fR(1)
or
\fBgit-init\fR(1)
will probe and set core\&.ignorecase true if appropriate when the repository is created\&.
.RE
.PP
core\&.trustctime
.RS 4
If false, the ctime differences between the index and the working copy are ignored; useful when the inode change time is regularly modified by something outside Git (file system crawlers and some backup systems)\&. See
\fBgit-update-index\fR(1)\&. True by default\&.
.RE
.PP
core\&.quotepath
.RS 4
The commands that output paths (e\&.g\&.
\fIls\-files\fR,
\fIdiff\fR), when not given the
\-z
option, will quote "unusual" characters in the pathname by enclosing the pathname in a double\-quote pair and with backslashes the same way strings in C source code are quoted\&. If this variable is set to false, the bytes higher than 0x80 are not quoted but output as verbatim\&. Note that double quote, backslash and control characters are always quoted without
\-z
regardless of the setting of this variable\&.
.RE
.PP
core\&.eol
.RS 4
Sets the line ending type to use in the working directory for files that have the
text
property set\&. Alternatives are
\fIlf\fR,
\fIcrlf\fR
and
\fInative\fR, which uses the platform\(cqs native line ending\&. The default value is
native\&. See
\fBgitattributes\fR(5)
for more information on end\-of\-line conversion\&.
.RE
.PP
core\&.safecrlf
.RS 4
If true, makes git check if converting
CRLF
is reversible when end\-of\-line conversion is active\&. Git will verify if a command modifies a file in the work tree either directly or indirectly\&. For example, committing a file followed by checking out the same file should yield the original file in the work tree\&. If this is not the case for the current setting of
core\&.autocrlf, git will reject the file\&. The variable can be set to "warn", in which case git will only warn about an irreversible conversion but continue the operation\&.
.sp
CRLF conversion bears a slight chance of corrupting data\&. When it is enabled, git will convert CRLF to LF during commit and LF to CRLF during checkout\&. A file that contains a mixture of LF and CRLF before the commit cannot be recreated by git\&. For text files this is the right thing to do: it corrects line endings such that we have only LF line endings in the repository\&. But for binary files that are accidentally classified as text the conversion can corrupt data\&.
.sp
If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in \&.gitattributes\&. Right after committing you still have the original file in your work tree and this file is not yet corrupted\&. You can explicitly tell git that this file is binary and git will handle the file appropriately\&.
.sp
Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of corrupting binary files cannot be distinguished\&. In both cases CRLFs are removed in an irreversible way\&. For text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs corrupts data\&.
.sp
Note, this safety check does not mean that a checkout will generate a file identical to the original file for a different setting of
core\&.eol
and
core\&.autocrlf, but only for the current one\&. For example, a text file with
LF
would be accepted with
core\&.eol=lf
and could later be checked out with
core\&.eol=crlf, in which case the resulting file would contain
CRLF, although the original file contained
LF\&. However, in both work trees the line endings would be consistent, that is either all
LF
or all
CRLF, but never mixed\&. A file with mixed line endings would be reported by the
core\&.safecrlf
mechanism\&.
.RE
.PP
core\&.autocrlf
.RS 4
Setting this variable to "true" is almost the same as setting the
text
attribute to "auto" on all files except that text files are not guaranteed to be normalized: files that contain
CRLF
in the repository will not be touched\&. Use this setting if you want to have
CRLF
line endings in your working directory even though the repository does not have normalized line endings\&. This variable can be set to
\fIinput\fR, in which case no output conversion is performed\&.
.RE
.PP
core\&.symlinks
.RS 4
If false, symbolic links are checked out as small plain files that contain the link text\&.
\fBgit-update-index\fR(1)
and
\fBgit-add\fR(1)
will not change the recorded type to regular file\&. Useful on filesystems like FAT that do not support symbolic links\&.
.sp
The default is true, except
\fBgit-clone\fR(1)
or
\fBgit-init\fR(1)
will probe and set core\&.symlinks false if appropriate when the repository is created\&.
.RE
.PP
core\&.gitProxy
.RS 4
A "proxy command" to execute (as
\fIcommand host port\fR) instead of establishing direct connection to the remote server when using the git protocol for fetching\&. If the variable value is in the "COMMAND for DOMAIN" format, the command is applied only on hostnames ending with the specified domain string\&. This variable may be set multiple times and is matched in the given order; the first match wins\&.
.sp
Can be overridden by the
\fIGIT_PROXY_COMMAND\fR
environment variable (which always applies universally, without the special "for" handling)\&.
.sp
The special string
none
can be used as the proxy command to specify that no proxy be used for a given domain pattern\&. This is useful for excluding servers inside a firewall from proxy use, while defaulting to a common proxy for external domains\&.
.RE
.PP
core\&.ignoreStat
.RS 4
If true, commands which modify both the working tree and the index will mark the updated paths with the "assume unchanged" bit in the index\&. These marked files are then assumed to stay unchanged in the working copy, until you mark them otherwise manually \- Git will not detect the file changes by lstat() calls\&. This is useful on systems where those are very slow, such as Microsoft Windows\&. See
\fBgit-update-index\fR(1)\&. False by default\&.
.RE
.PP
core\&.preferSymlinkRefs
.RS 4
Instead of the default "symref" format for HEAD and other symbolic reference files, use symbolic links\&. This is sometimes needed to work with old scripts that expect HEAD to be a symbolic link\&.
.RE
.PP
core\&.bare
.RS 4
If true this repository is assumed to be
\fIbare\fR
and has no working directory associated with it\&. If this is the case a number of commands that require a working directory will be disabled, such as
\fBgit-add\fR(1)
or
\fBgit-merge\fR(1)\&.
.sp
This setting is automatically guessed by
\fBgit-clone\fR(1)
or
\fBgit-init\fR(1)
when the repository was created\&. By default a repository that ends in "/\&.git" is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true)\&.
.RE
.PP
core\&.worktree
.RS 4
Set the path to the root of the working tree\&. This can be overridden by the GIT_WORK_TREE environment variable and the
\fI\-\-work\-tree\fR
command line option\&. The value can be an absolute path or relative to the path to the \&.git directory, which is either specified by \-\-git\-dir or GIT_DIR, or automatically discovered\&. If \-\-git\-dir or GIT_DIR is specified but none of \-\-work\-tree, GIT_WORK_TREE and core\&.worktree is specified, the current working directory is regarded as the top level of your working tree\&.
.sp
Note that this variable is honored even when set in a configuration file in a "\&.git" subdirectory of a directory and its value differs from the latter directory (e\&.g\&. "/path/to/\&.git/config" has core\&.worktree set to "/different/path"), which is most likely a misconfiguration\&. Running git commands in the "/path/to" directory will still use "/different/path" as the root of the work tree and can cause confusion unless you know what you are doing (e\&.g\&. you are creating a read\-only snapshot of the same index to a location different from the repository\(cqs usual working tree)\&.
.RE
.PP
core\&.logAllRefUpdates
.RS 4
Enable the reflog\&. Updates to a ref <ref> is logged to the file "$GIT_DIR/logs/<ref>", by appending the new and old SHA1, the date/time and the reason of the update, but only when the file exists\&. If this configuration variable is set to true, missing "$GIT_DIR/logs/<ref>" file is automatically created for branch heads\&.
.sp
This information can be used to determine what commit was the tip of a branch "2 days ago"\&.
.sp
This value is true by default in a repository that has a working directory associated with it, and false by default in a bare repository\&.
.RE
.PP
core\&.repositoryFormatVersion
.RS 4
Internal variable identifying the repository format and layout version\&.
.RE
.PP
core\&.sharedRepository
.RS 4
When
\fIgroup\fR
(or
\fItrue\fR), the repository is made shareable between several users in a group (making sure all the files and objects are group\-writable)\&. When
\fIall\fR
(or
\fIworld\fR
or
\fIeverybody\fR), the repository will be readable by all users, additionally to being group\-shareable\&. When
\fIumask\fR
(or
\fIfalse\fR), git will use permissions reported by umask(2)\&. When
\fI0xxx\fR, where
\fI0xxx\fR
is an octal number, files in the repository will have this mode value\&.
\fI0xxx\fR
will override user\(cqs umask value (whereas the other options will only override requested parts of the user\(cqs umask value)\&. Examples:
\fI0660\fR
will make the repo read/write\-able for the owner and group, but inaccessible to others (equivalent to
\fIgroup\fR
unless umask is e\&.g\&.
\fI0022\fR)\&.
\fI0640\fR
is a repository that is group\-readable but not group\-writable\&. See
\fBgit-init\fR(1)\&. False by default\&.
.RE
.PP
core\&.warnAmbiguousRefs
.RS 4
If true, git will warn you if the ref name you passed it is ambiguous and might match multiple refs in the \&.git/refs/ tree\&. True by default\&.
.RE
.PP
core\&.compression
.RS 4
An integer \-1\&.\&.9, indicating a default compression level\&. \-1 is the zlib default\&. 0 means no compression, and 1\&.\&.9 are various speed/size tradeoffs, 9 being slowest\&. If set, this provides a default to other compression variables, such as
\fIcore\&.loosecompression\fR
and
\fIpack\&.compression\fR\&.
.RE
.PP
core\&.loosecompression
.RS 4
An integer \-1\&.\&.9, indicating the compression level for objects that are not in a pack file\&. \-1 is the zlib default\&. 0 means no compression, and 1\&.\&.9 are various speed/size tradeoffs, 9 being slowest\&. If not set, defaults to core\&.compression\&. If that is not set, defaults to 1 (best speed)\&.
.RE
.PP
core\&.packedGitWindowSize
.RS 4
Number of bytes of a pack file to map into memory in a single mapping operation\&. Larger window sizes may allow your system to process a smaller number of large pack files more quickly\&. Smaller window sizes will negatively affect performance due to increased calls to the operating system\(cqs memory manager, but may improve performance when accessing a large number of large pack files\&.
.sp
Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32 MiB on 32 bit platforms and 1 GiB on 64 bit platforms\&. This should be reasonable for all users/operating systems\&. You probably do not need to adjust this value\&.
.sp
Common unit suffixes of
\fIk\fR,
\fIm\fR, or
\fIg\fR
are supported\&.
.RE
.PP
core\&.packedGitLimit
.RS 4
Maximum number of bytes to map simultaneously into memory from pack files\&. If Git needs to access more than this many bytes at once to complete an operation it will unmap existing regions to reclaim virtual address space within the process\&.
.sp
Default is 256 MiB on 32 bit platforms and 8 GiB on 64 bit platforms\&. This should be reasonable for all users/operating systems, except on the largest projects\&. You probably do not need to adjust this value\&.
.sp
Common unit suffixes of
\fIk\fR,
\fIm\fR, or
\fIg\fR
are supported\&.
.RE
.PP
core\&.deltaBaseCacheLimit
.RS 4
Maximum number of bytes to reserve for caching base objects that may be referenced by multiple deltified objects\&. By storing the entire decompressed base objects in a cache Git is able to avoid unpacking and decompressing frequently used base objects multiple times\&.
.sp
Default is 16 MiB on all platforms\&. This should be reasonable for all users/operating systems, except on the largest projects\&. You probably do not need to adjust this value\&.
.sp
Common unit suffixes of
\fIk\fR,
\fIm\fR, or
\fIg\fR
are supported\&.
.RE
.PP
core\&.bigFileThreshold
.RS 4
Files larger than this size are stored deflated, without attempting delta compression\&. Storing large files without delta compression avoids excessive memory usage, at the slight expense of increased disk usage\&.
.sp
Default is 512 MiB on all platforms\&. This should be reasonable for most projects as source code and other text files can still be delta compressed, but larger binary media files won\(cqt be\&.
.sp
Common unit suffixes of
\fIk\fR,
\fIm\fR, or
\fIg\fR
are supported\&.
.sp
Currently only
\fBgit-fast-import\fR(1)
honors this setting\&.
.RE
.PP
core\&.excludesfile
.RS 4
In addition to
\fI\&.gitignore\fR
(per\-directory) and
\fI\&.git/info/exclude\fR, git looks into this file for patterns of files which are not meant to be tracked\&. "~/" is expanded to the value of
$HOME
and "~user/" to the specified user\(cqs home directory\&. See
\fBgitignore\fR(5)\&.
.RE
.PP
core\&.askpass
.RS 4
Some commands (e\&.g\&. svn and http interfaces) that interactively ask for a password can be told to use an external program given via the value of this variable\&. Can be overridden by the
\fIGIT_ASKPASS\fR
environment variable\&. If not set, fall back to the value of the
\fISSH_ASKPASS\fR
environment variable or, failing that, a simple password prompt\&. The external program shall be given a suitable prompt as command line argument and write the password on its STDOUT\&.
.RE
.PP
core\&.attributesfile
.RS 4
In addition to
\fI\&.gitattributes\fR
(per\-directory) and
\fI\&.git/info/attributes\fR, git looks into this file for attributes (see
\fBgitattributes\fR(5))\&. Path expansions are made the same way as for
core\&.excludesfile\&.
.RE
.PP
core\&.editor
.RS 4
Commands such as
commit
and
tag
that lets you edit messages by launching an editor uses the value of this variable when it is set, and the environment variable
GIT_EDITOR
is not set\&. See
\fBgit-var\fR(1)\&.
.RE
.PP
core\&.pager
.RS 4
The command that git will use to paginate output\&. Can be overridden with the
GIT_PAGER
environment variable\&. Note that git sets the
LESS
environment variable to
FRSX
if it is unset when it runs the pager\&. One can change these settings by setting the
LESS
variable to some other value\&. Alternately, these settings can be overridden on a project or global basis by setting the
core\&.pager
option\&. Setting
core\&.pager
has no affect on the
LESS
environment variable behaviour above, so if you want to override git\(cqs default settings this way, you need to be explicit\&. For example, to disable the S option in a backward compatible manner, set
core\&.pager
to
less \-+$LESS \-FRX\&. This will be passed to the shell by git, which will translate the final command to
LESS=FRSX less \-+FRSX \-FRX\&.
.RE
.PP
core\&.whitespace
.RS 4
A comma separated list of common whitespace problems to notice\&.
\fIgit diff\fR
will use
color\&.diff\&.whitespace
to highlight them, and
\fIgit apply \-\-whitespace=error\fR
will consider them as errors\&. You can prefix
\-
to disable any of them (e\&.g\&.
\-trailing\-space):
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

blank\-at\-eol
treats trailing whitespaces at the end of the line as an error (enabled by default)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

space\-before\-tab
treats a space character that appears immediately before a tab character in the initial indent part of the line as an error (enabled by default)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

indent\-with\-non\-tab
treats a line that is indented with 8 or more space characters as an error (not enabled by default)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

tab\-in\-indent
treats a tab character in the initial indent part of the line as an error (not enabled by default)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

blank\-at\-eof
treats blank lines added at the end of file as an error (enabled by default)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

trailing\-space
is a short\-hand to cover both
blank\-at\-eol
and
blank\-at\-eof\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

cr\-at\-eol
treats a carriage\-return at the end of line as part of the line terminator, i\&.e\&. with it,
trailing\-space
does not trigger if the character before such a carriage\-return is not a whitespace (not enabled by default)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

tabwidth=<n>
tells how many character positions a tab occupies; this is relevant for
indent\-with\-non\-tab
and when git fixes
tab\-in\-indent
errors\&. The default tab width is 8\&. Allowed values are 1 to 63\&.
.RE
.RE
.PP
core\&.fsyncobjectfiles
.RS 4
This boolean will enable
\fIfsync()\fR
when writing object files\&.
.sp
This is a total waste of time and effort on a filesystem that orders data writes properly, but can be useful for filesystems that do not use journalling (traditional UNIX filesystems) or that only journal metadata and not file contents (OS X\(cqs HFS+, or Linux ext3 with "data=writeback")\&.
.RE
.PP
core\&.preloadindex
.RS 4
Enable parallel index preload for operations like
\fIgit diff\fR
.sp
This can speed up operations like
\fIgit diff\fR
and
\fIgit status\fR
especially on filesystems like NFS that have weak caching semantics and thus relatively high IO latencies\&. With this set to
\fItrue\fR, git will do the index comparison to the filesystem data in parallel, allowing overlapping IO\(cqs\&.
.RE
.PP
core\&.createObject
.RS 4
You can set this to
\fIlink\fR, in which case a hardlink followed by a delete of the source are used to make sure that object creation will not overwrite existing objects\&.
.sp
On some file system/operating system combinations, this is unreliable\&. Set this config setting to
\fIrename\fR
there; However, This will remove the check that makes sure that existing object files will not get overwritten\&.
.RE
.PP
core\&.notesRef
.RS 4
When showing commit messages, also show notes which are stored in the given ref\&. The ref must be fully qualified\&. If the given ref does not exist, it is not an error but means that no notes should be printed\&.
.sp
This setting defaults to "refs/notes/commits", and it can be overridden by the
\fIGIT_NOTES_REF\fR
environment variable\&. See
\fBgit-notes\fR(1)\&.
.RE
.PP
core\&.sparseCheckout
.RS 4
Enable "sparse checkout" feature\&. See section "Sparse checkout" in
\fBgit-read-tree\fR(1)
for more information\&.
.RE
.PP
core\&.abbrev
.RS 4
Set the length object names are abbreviated to\&. If unspecified, many commands abbreviate to 7 hexdigits, which may not be enough for abbreviated object names to stay unique for sufficiently long time\&.
.RE
.PP
add\&.ignore\-errors, add\&.ignoreErrors
.RS 4
Tells
\fIgit add\fR
to continue adding files when some files cannot be added due to indexing errors\&. Equivalent to the
\fI\-\-ignore\-errors\fR
option of
\fBgit-add\fR(1)\&. Older versions of git accept only
add\&.ignore\-errors, which does not follow the usual naming convention for configuration variables\&. Newer versions of git honor
add\&.ignoreErrors
as well\&.
.RE
.PP
alias\&.*
.RS 4
Command aliases for the
\fBgit\fR(1)
command wrapper \- e\&.g\&. after defining "alias\&.last = cat\-file commit HEAD", the invocation "git last" is equivalent to "git cat\-file commit HEAD"\&. To avoid confusion and troubles with script usage, aliases that hide existing git commands are ignored\&. Arguments are split by spaces, the usual shell quoting and escaping is supported\&. quote pair and a backslash can be used to quote them\&.
.sp
If the alias expansion is prefixed with an exclamation point, it will be treated as a shell command\&. For example, defining "alias\&.new = !gitk \-\-all \-\-not ORIG_HEAD", the invocation "git new" is equivalent to running the shell command "gitk \-\-all \-\-not ORIG_HEAD"\&. Note that shell commands will be executed from the top\-level directory of a repository, which may not necessarily be the current directory\&.
.RE
.PP
am\&.keepcr
.RS 4
If true, git\-am will call git\-mailsplit for patches in mbox format with parameter
\fI\-\-keep\-cr\fR\&. In this case git\-mailsplit will not remove
\er
from lines ending with
\er\en\&. Can be overridden by giving
\fI\-\-no\-keep\-cr\fR
from the command line\&. See
\fBgit-am\fR(1),
\fBgit-mailsplit\fR(1)\&.
.RE
.PP
apply\&.ignorewhitespace
.RS 4
When set to
\fIchange\fR, tells
\fIgit apply\fR
to ignore changes in whitespace, in the same way as the
\fI\-\-ignore\-space\-change\fR
option\&. When set to one of: no, none, never, false tells
\fIgit apply\fR
to respect all whitespace differences\&. See
\fBgit-apply\fR(1)\&.
.RE
.PP
apply\&.whitespace
.RS 4
Tells
\fIgit apply\fR
how to handle whitespaces, in the same way as the
\fI\-\-whitespace\fR
option\&. See
\fBgit-apply\fR(1)\&.
.RE
.PP
branch\&.autosetupmerge
.RS 4
Tells
\fIgit branch\fR
and
\fIgit checkout\fR
to set up new branches so that
\fBgit-pull\fR(1)
will appropriately merge from the starting point branch\&. Note that even if this option is not set, this behavior can be chosen per\-branch using the
\-\-track
and
\-\-no\-track
options\&. The valid settings are:
false \(em no automatic setup is done;
true \(em automatic setup is done when the starting point is a remote\-tracking branch;
always \(em  automatic setup is done when the starting point is either a local branch or remote\-tracking branch\&. This option defaults to true\&.
.RE
.PP
branch\&.autosetuprebase
.RS 4
When a new branch is created with
\fIgit branch\fR
or
\fIgit checkout\fR
that tracks another branch, this variable tells git to set up pull to rebase instead of merge (see "branch\&.<name>\&.rebase")\&. When
never, rebase is never automatically set to true\&. When
local, rebase is set to true for tracked branches of other local branches\&. When
remote, rebase is set to true for tracked branches of remote\-tracking branches\&. When
always, rebase will be set to true for all tracking branches\&. See "branch\&.autosetupmerge" for details on how to set up a branch to track another branch\&. This option defaults to never\&.
.RE
.PP
branch\&.<name>\&.remote
.RS 4
When in branch <name>, it tells
\fIgit fetch\fR
and
\fIgit push\fR
which remote to fetch from/push to\&. It defaults to
origin
if no remote is configured\&.
origin
is also used if you are not on any branch\&.
.RE
.PP
branch\&.<name>\&.merge
.RS 4
Defines, together with branch\&.<name>\&.remote, the upstream branch for the given branch\&. It tells
\fIgit fetch\fR/\fIgit pull\fR
which branch to merge and can also affect
\fIgit push\fR
(see push\&.default)\&. When in branch <name>, it tells
\fIgit fetch\fR
the default refspec to be marked for merging in FETCH_HEAD\&. The value is handled like the remote part of a refspec, and must match a ref which is fetched from the remote given by "branch\&.<name>\&.remote"\&. The merge information is used by
\fIgit pull\fR
(which at first calls
\fIgit fetch\fR) to lookup the default branch for merging\&. Without this option,
\fIgit pull\fR
defaults to merge the first refspec fetched\&. Specify multiple values to get an octopus merge\&. If you wish to setup
\fIgit pull\fR
so that it merges into <name> from another branch in the local repository, you can point branch\&.<name>\&.merge to the desired branch, and use the special setting
\&.
(a period) for branch\&.<name>\&.remote\&.
.RE
.PP
branch\&.<name>\&.mergeoptions
.RS 4
Sets default options for merging into branch <name>\&. The syntax and supported options are the same as those of
\fBgit-merge\fR(1), but option values containing whitespace characters are currently not supported\&.
.RE
.PP
branch\&.<name>\&.rebase
.RS 4
When true, rebase the branch <name> on top of the fetched branch, instead of merging the default branch from the default remote when "git pull" is run\&.
\fBNOTE\fR: this is a possibly dangerous operation; do
\fBnot\fR
use it unless you understand the implications (see
\fBgit-rebase\fR(1)
for details)\&.
.RE
.PP
browser\&.<tool>\&.cmd
.RS 4
Specify the command to invoke the specified browser\&. The specified command is evaluated in shell with the URLs passed as arguments\&. (See
\fBgit-web\(embrowse\fR(1)\&.)
.RE
.PP
browser\&.<tool>\&.path
.RS 4
Override the path for the given tool that may be used to browse HTML help (see
\fI\-w\fR
option in
\fBgit-help\fR(1)) or a working repository in gitweb (see
\fBgit-instaweb\fR(1))\&.
.RE
.PP
clean\&.requireForce
.RS 4
A boolean to make git\-clean do nothing unless given \-f or \-n\&. Defaults to true\&.
.RE
.PP
color\&.branch
.RS 4
A boolean to enable/disable color in the output of
\fBgit-branch\fR(1)\&. May be set to
always,
false
(or
never) or
auto
(or
true), in which case colors are used only when the output is to a terminal\&. Defaults to false\&.
.RE
.PP
color\&.branch\&.<slot>
.RS 4
Use customized color for branch coloration\&.
<slot>
is one of
current
(the current branch),
local
(a local branch),
remote
(a remote\-tracking branch in refs/remotes/),
plain
(other refs)\&.
.sp
The value for these configuration variables is a list of colors (at most two) and attributes (at most one), separated by spaces\&. The colors accepted are
normal,
black,
red,
green,
yellow,
blue,
magenta,
cyan
and
white; the attributes are
bold,
dim,
ul,
blink
and
reverse\&. The first color given is the foreground; the second is the background\&. The position of the attribute, if any, doesn\(cqt matter\&.
.RE
.PP
color\&.diff
.RS 4
When set to
always, always use colors in patch\&. When false (or
never), never\&. When set to
true
or
auto, use colors only when the output is to the terminal\&. Defaults to false\&.
.RE
.PP
color\&.diff\&.<slot>
.RS 4
Use customized color for diff colorization\&.
<slot>
specifies which part of the patch to use the specified color, and is one of
plain
(context text),
meta
(metainformation),
frag
(hunk header),
\fIfunc\fR
(function in hunk header),
old
(removed lines),
new
(added lines),
commit
(commit headers), or
whitespace
(highlighting whitespace errors)\&. The values of these variables may be specified as in color\&.branch\&.<slot>\&.
.RE
.PP
color\&.decorate\&.<slot>
.RS 4
Use customized color for
\fIgit log \-\-decorate\fR
output\&.
<slot>
is one of
branch,
remoteBranch,
tag,
stash
or
HEAD
for local branches, remote\-tracking branches, tags, stash and HEAD, respectively\&.
.RE
.PP
color\&.grep
.RS 4
When set to
always, always highlight matches\&. When
false
(or
never), never\&. When set to
true
or
auto, use color only when the output is written to the terminal\&. Defaults to
false\&.
.RE
.PP
color\&.grep\&.<slot>
.RS 4
Use customized color for grep colorization\&.
<slot>
specifies which part of the line to use the specified color, and is one of
.PP
context
.RS 4
non\-matching text in context lines (when using
\-A,
\-B, or
\-C)
.RE
.PP
filename
.RS 4
filename prefix (when not using
\-h)
.RE
.PP
function
.RS 4
function name lines (when using
\-p)
.RE
.PP
linenumber
.RS 4
line number prefix (when using
\-n)
.RE
.PP
match
.RS 4
matching text
.RE
.PP
selected
.RS 4
non\-matching text in selected lines
.RE
.PP
separator
.RS 4
separators between fields on a line (:,
\-, and
=) and between hunks (\-\-)
.RE
.sp
The values of these variables may be specified as in color\&.branch\&.<slot>\&.
.RE
.PP
color\&.interactive
.RS 4
When set to
always, always use colors for interactive prompts and displays (such as those used by "git\-add \-\-interactive")\&. When false (or
never), never\&. When set to
true
or
auto, use colors only when the output is to the terminal\&. Defaults to false\&.
.RE
.PP
color\&.interactive\&.<slot>
.RS 4
Use customized color for
\fIgit add \-\-interactive\fR
output\&.
<slot>
may be
prompt,
header,
help
or
error, for four distinct types of normal output from interactive commands\&. The values of these variables may be specified as in color\&.branch\&.<slot>\&.
.RE
.PP
color\&.pager
.RS 4
A boolean to enable/disable colored output when the pager is in use (default is true)\&.
.RE
.PP
color\&.showbranch
.RS 4
A boolean to enable/disable color in the output of
\fBgit-show-branch\fR(1)\&. May be set to
always,
false
(or
never) or
auto
(or
true), in which case colors are used only when the output is to a terminal\&. Defaults to false\&.
.RE
.PP
color\&.status
.RS 4
A boolean to enable/disable color in the output of
\fBgit-status\fR(1)\&. May be set to
always,
false
(or
never) or
auto
(or
true), in which case colors are used only when the output is to a terminal\&. Defaults to false\&.
.RE
.PP
color\&.status\&.<slot>
.RS 4
Use customized color for status colorization\&.
<slot>
is one of
header
(the header text of the status message),
added
or
updated
(files which are added but not committed),
changed
(files which are changed but not added in the index),
untracked
(files which are not tracked by git),
branch
(the current branch), or
nobranch
(the color the
\fIno branch\fR
warning is shown in, defaulting to red)\&. The values of these variables may be specified as in color\&.branch\&.<slot>\&.
.RE
.PP
color\&.ui
.RS 4
When set to
always, always use colors in all git commands which are capable of colored output\&. When false (or
never), never\&. When set to
true
or
auto, use colors only when the output is to the terminal\&. When more specific variables of color\&.* are set, they always take precedence over this setting\&. Defaults to false\&.
.RE
.PP
commit\&.status
.RS 4
A boolean to enable/disable inclusion of status information in the commit message template when using an editor to prepare the commit message\&. Defaults to true\&.
.RE
.PP
commit\&.template
.RS 4
Specify a file to use as the template for new commit messages\&. "~/" is expanded to the value of
$HOME
and "~user/" to the specified user\(cqs home directory\&.
.RE
.PP
diff\&.autorefreshindex
.RS 4
When using
\fIgit diff\fR
to compare with work tree files, do not consider stat\-only change as changed\&. Instead, silently run
git update\-index \-\-refresh
to update the cached stat information for paths whose contents in the work tree match the contents in the index\&. This option defaults to true\&. Note that this affects only
\fIgit diff\fR
Porcelain, and not lower level
\fIdiff\fR
commands such as
\fIgit diff\-files\fR\&.
.RE
.PP
diff\&.external
.RS 4
If this config variable is set, diff generation is not performed using the internal diff machinery, but using the given command\&. Can be overridden with the \(oqGIT_EXTERNAL_DIFF\(cq environment variable\&. The command is called with parameters as described under "git Diffs" in
\fBgit\fR(1)\&. Note: if you want to use an external diff program only on a subset of your files, you might want to use
\fBgitattributes\fR(5)
instead\&.
.RE
.PP
diff\&.mnemonicprefix
.RS 4
If set,
\fIgit diff\fR
uses a prefix pair that is different from the standard "a/" and "b/" depending on what is being compared\&. When this configuration is in effect, reverse diff output also swaps the order of the prefixes:
.PP
git diff
.RS 4
compares the (i)ndex and the (w)ork tree;
.RE
.PP
git diff HEAD
.RS 4
compares a (c)ommit and the (w)ork tree;
.RE
.PP
git diff \-\-cached
.RS 4
compares a (c)ommit and the (i)ndex;
.RE
.PP
git diff HEAD:file1 file2
.RS 4
compares an (o)bject and a (w)ork tree entity;
.RE
.PP
git diff \-\-no\-index a b
.RS 4
compares two non\-git things (1) and (2)\&.
.RE
.RE
.PP
diff\&.noprefix
.RS 4
If set,
\fIgit diff\fR
does not show any source or destination prefix\&.
.RE
.PP
diff\&.renameLimit
.RS 4
The number of files to consider when performing the copy/rename detection; equivalent to the
\fIgit diff\fR
option
\fI\-l\fR\&.
.RE
.PP
diff\&.renames
.RS 4
Tells git to detect renames\&. If set to any boolean value, it will enable basic rename detection\&. If set to "copies" or "copy", it will detect copies, as well\&.
.RE
.PP
diff\&.ignoreSubmodules
.RS 4
Sets the default value of \-\-ignore\-submodules\&. Note that this affects only
\fIgit diff\fR
Porcelain, and not lower level
\fIdiff\fR
commands such as
\fIgit diff\-files\fR\&.
\fIgit checkout\fR
also honors this setting when reporting uncommitted changes\&.
.RE
.PP
diff\&.suppressBlankEmpty
.RS 4
A boolean to inhibit the standard behavior of printing a space before each empty output line\&. Defaults to false\&.
.RE
.PP
diff\&.tool
.RS 4
Controls which diff tool is used\&.
diff\&.tool
overrides
merge\&.tool
when used by
\fBgit-difftool\fR(1)
and has the same valid values as
merge\&.tool
minus "tortoisemerge" and plus "kompare"\&.
.RE
.PP
difftool\&.<tool>\&.path
.RS 4
Override the path for the given tool\&. This is useful in case your tool is not in the PATH\&.
.RE
.PP
difftool\&.<tool>\&.cmd
.RS 4
Specify the command to invoke the specified diff tool\&. The specified command is evaluated in shell with the following variables available:
\fILOCAL\fR
is set to the name of the temporary file containing the contents of the diff pre\-image and
\fIREMOTE\fR
is set to the name of the temporary file containing the contents of the diff post\-image\&.
.RE
.PP
difftool\&.prompt
.RS 4
Prompt before each invocation of the diff tool\&.
.RE
.PP
diff\&.wordRegex
.RS 4
A POSIX Extended Regular Expression used to determine what is a "word" when performing word\-by\-word difference calculations\&. Character sequences that match the regular expression are "words", all other characters are
\fBignorable\fR
whitespace\&.
.RE
.PP
fetch\&.recurseSubmodules
.RS 4
A boolean value which changes the behavior for fetch and pull, the default is to not recursively fetch populated submodules unless configured otherwise\&.
.RE
.PP
fetch\&.unpackLimit
.RS 4
If the number of objects fetched over the git native transfer is below this limit, then the objects will be unpacked into loose object files\&. However if the number of received objects equals or exceeds this limit then the received pack will be stored as a pack, after adding any missing delta bases\&. Storing the pack from a push can make the push operation complete faster, especially on slow filesystems\&. If not set, the value of
transfer\&.unpackLimit
is used instead\&.
.RE
.PP
format\&.attach
.RS 4
Enable multipart/mixed attachments as the default for
\fIformat\-patch\fR\&. The value can also be a double quoted string which will enable attachments as the default and set the value as the boundary\&. See the \-\-attach option in
\fBgit-format-patch\fR(1)\&.
.RE
.PP
format\&.numbered
.RS 4
A boolean which can enable or disable sequence numbers in patch subjects\&. It defaults to "auto" which enables it only if there is more than one patch\&. It can be enabled or disabled for all messages by setting it to "true" or "false"\&. See \-\-numbered option in
\fBgit-format-patch\fR(1)\&.
.RE
.PP
format\&.headers
.RS 4
Additional email headers to include in a patch to be submitted by mail\&. See
\fBgit-format-patch\fR(1)\&.
.RE
.PP
format\&.to, format\&.cc
.RS 4
Additional recipients to include in a patch to be submitted by mail\&. See the \-\-to and \-\-cc options in
\fBgit-format-patch\fR(1)\&.
.RE
.PP
format\&.subjectprefix
.RS 4
The default for format\-patch is to output files with the
\fI[PATCH]\fR
subject prefix\&. Use this variable to change that prefix\&.
.RE
.PP
format\&.signature
.RS 4
The default for format\-patch is to output a signature containing the git version number\&. Use this variable to change that default\&. Set this variable to the empty string ("") to suppress signature generation\&.
.RE
.PP
format\&.suffix
.RS 4
The default for format\-patch is to output files with the suffix
\&.patch\&. Use this variable to change that suffix (make sure to include the dot if you want it)\&.
.RE
.PP
format\&.pretty
.RS 4
The default pretty format for log/show/whatchanged command, See
\fBgit-log\fR(1),
\fBgit-show\fR(1),
\fBgit-whatchanged\fR(1)\&.
.RE
.PP
format\&.thread
.RS 4
The default threading style for
\fIgit format\-patch\fR\&. Can be a boolean value, or
shallow
or
deep\&.
shallow
threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the
\-\-in\-reply\-to, and the first patch mail, in this order\&.
deep
threading makes every mail a reply to the previous one\&. A true boolean value is the same as
shallow, and a false value disables threading\&.
.RE
.PP
format\&.signoff
.RS 4
A boolean value which lets you enable the
\-s/\-\-signoff
option of format\-patch by default\&.
\fBNote:\fR
Adding the Signed\-off\-by: line to a patch should be a conscious act and means that you certify you have the rights to submit this work under the same open source license\&. Please see the
\fISubmittingPatches\fR
document for further discussion\&.
.RE
.PP
gc\&.aggressiveWindow
.RS 4
The window size parameter used in the delta compression algorithm used by
\fIgit gc \-\-aggressive\fR\&. This defaults to 250\&.
.RE
.PP
gc\&.auto
.RS 4
When there are approximately more than this many loose objects in the repository,
git gc \-\-auto
will pack them\&. Some Porcelain commands use this command to perform a light\-weight garbage collection from time to time\&. The default value is 6700\&. Setting this to 0 disables it\&.
.RE
.PP
gc\&.autopacklimit
.RS 4
When there are more than this many packs that are not marked with
*\&.keep
file in the repository,
git gc \-\-auto
consolidates them into one larger pack\&. The default value is 50\&. Setting this to 0 disables it\&.
.RE
.PP
gc\&.packrefs
.RS 4
Running
git pack\-refs
in a repository renders it unclonable by Git versions prior to 1\&.5\&.1\&.2 over dumb transports such as HTTP\&. This variable determines whether
\fIgit gc\fR
runs
git pack\-refs\&. This can be set to
notbare
to enable it within all non\-bare repos or it can be set to a boolean value\&. The default is
true\&.
.RE
.PP
gc\&.pruneexpire
.RS 4
When
\fIgit gc\fR
is run, it will call
\fIprune \-\-expire 2\&.weeks\&.ago\fR\&. Override the grace period with this config variable\&. The value "now" may be used to disable this grace period and always prune unreachable objects immediately\&.
.RE
.PP
gc\&.reflogexpire, gc\&.<pattern>\&.reflogexpire
.RS 4

\fIgit reflog expire\fR
removes reflog entries older than this time; defaults to 90 days\&. With "<pattern>" (e\&.g\&. "refs/stash") in the middle the setting applies only to the refs that match the <pattern>\&.
.RE
.PP
gc\&.reflogexpireunreachable, gc\&.<ref>\&.reflogexpireunreachable
.RS 4

\fIgit reflog expire\fR
removes reflog entries older than this time and are not reachable from the current tip; defaults to 30 days\&. With "<pattern>" (e\&.g\&. "refs/stash") in the middle, the setting applies only to the refs that match the <pattern>\&.
.RE
.PP
gc\&.rerereresolved
.RS 4
Records of conflicted merge you resolved earlier are kept for this many days when
\fIgit rerere gc\fR
is run\&. The default is 60 days\&. See
\fBgit-rerere\fR(1)\&.
.RE
.PP
gc\&.rerereunresolved
.RS 4
Records of conflicted merge you have not resolved are kept for this many days when
\fIgit rerere gc\fR
is run\&. The default is 15 days\&. See
\fBgit-rerere\fR(1)\&.
.RE
.PP
gitcvs\&.commitmsgannotation
.RS 4
Append this string to each commit message\&. Set to empty string to disable this feature\&. Defaults to "via git\-CVS emulator"\&.
.RE
.PP
gitcvs\&.enabled
.RS 4
Whether the CVS server interface is enabled for this repository\&. See
\fBgit-cvsserver\fR(1)\&.
.RE
.PP
gitcvs\&.logfile
.RS 4
Path to a log file where the CVS server interface well\&... logs various stuff\&. See
\fBgit-cvsserver\fR(1)\&.
.RE
.PP
gitcvs\&.usecrlfattr
.RS 4
If true, the server will look up the end\-of\-line conversion attributes for files to determine the
\fI\-k\fR
modes to use\&. If the attributes force git to treat a file as text, the
\fI\-k\fR
mode will be left blank so CVS clients will treat it as text\&. If they suppress text conversion, the file will be set with
\fI\-kb\fR
mode, which suppresses any newline munging the client might otherwise do\&. If the attributes do not allow the file type to be determined, then
\fIgitcvs\&.allbinary\fR
is used\&. See
\fBgitattributes\fR(5)\&.
.RE
.PP
gitcvs\&.allbinary
.RS 4
This is used if
\fIgitcvs\&.usecrlfattr\fR
does not resolve the correct
\fI\-kb\fR
mode to use\&. If true, all unresolved files are sent to the client in mode
\fI\-kb\fR\&. This causes the client to treat them as binary files, which suppresses any newline munging it otherwise might do\&. Alternatively, if it is set to "guess", then the contents of the file are examined to decide if it is binary, similar to
\fIcore\&.autocrlf\fR\&.
.RE
.PP
gitcvs\&.dbname
.RS 4
Database used by git\-cvsserver to cache revision information derived from the git repository\&. The exact meaning depends on the used database driver, for SQLite (which is the default driver) this is a filename\&. Supports variable substitution (see
\fBgit-cvsserver\fR(1)
for details)\&. May not contain semicolons (;)\&. Default:
\fI%Ggitcvs\&.%m\&.sqlite\fR
.RE
.PP
gitcvs\&.dbdriver
.RS 4
Used Perl DBI driver\&. You can specify any available driver for this here, but it might not work\&. git\-cvsserver is tested with
\fIDBD::SQLite\fR, reported to work with
\fIDBD::Pg\fR, and reported
\fBnot\fR
to work with
\fIDBD::mysql\fR\&. Experimental feature\&. May not contain double colons (:)\&. Default:
\fISQLite\fR\&. See
\fBgit-cvsserver\fR(1)\&.
.RE
.PP
gitcvs\&.dbuser, gitcvs\&.dbpass
.RS 4
Database user and password\&. Only useful if setting
\fIgitcvs\&.dbdriver\fR, since SQLite has no concept of database users and/or passwords\&.
\fIgitcvs\&.dbuser\fR
supports variable substitution (see
\fBgit-cvsserver\fR(1)
for details)\&.
.RE
.PP
gitcvs\&.dbTableNamePrefix
.RS 4
Database table name prefix\&. Prepended to the names of any database tables used, allowing a single database to be used for several repositories\&. Supports variable substitution (see
\fBgit-cvsserver\fR(1)
for details)\&. Any non\-alphabetic characters will be replaced with underscores\&.
.RE
.sp
All gitcvs variables except for \fIgitcvs\&.usecrlfattr\fR and \fIgitcvs\&.allbinary\fR can also be specified as \fIgitcvs\&.<access_method>\&.<varname>\fR (where \fIaccess_method\fR is one of "ext" and "pserver") to make them apply only for the given access method\&.
.PP
gui\&.commitmsgwidth
.RS 4
Defines how wide the commit message window is in the
\fBgit-gui\fR(1)\&. "75" is the default\&.
.RE
.PP
gui\&.diffcontext
.RS 4
Specifies how many context lines should be used in calls to diff made by the
\fBgit-gui\fR(1)\&. The default is "5"\&.
.RE
.PP
gui\&.encoding
.RS 4
Specifies the default encoding to use for displaying of file contents in
\fBgit-gui\fR(1)
and
\fBgitk\fR(1)\&. It can be overridden by setting the
\fIencoding\fR
attribute for relevant files (see
\fBgitattributes\fR(5))\&. If this option is not set, the tools default to the locale encoding\&.
.RE
.PP
gui\&.matchtrackingbranch
.RS 4
Determines if new branches created with
\fBgit-gui\fR(1)
should default to tracking remote branches with matching names or not\&. Default: "false"\&.
.RE
.PP
gui\&.newbranchtemplate
.RS 4
Is used as suggested name when creating new branches using the
\fBgit-gui\fR(1)\&.
.RE
.PP
gui\&.pruneduringfetch
.RS 4
"true" if
\fBgit-gui\fR(1)
should prune remote\-tracking branches when performing a fetch\&. The default value is "false"\&.
.RE
.PP
gui\&.trustmtime
.RS 4
Determines if
\fBgit-gui\fR(1)
should trust the file modification timestamp or not\&. By default the timestamps are not trusted\&.
.RE
.PP
gui\&.spellingdictionary
.RS 4
Specifies the dictionary used for spell checking commit messages in the
\fBgit-gui\fR(1)\&. When set to "none" spell checking is turned off\&.
.RE
.PP
gui\&.fastcopyblame
.RS 4
If true,
\fIgit gui blame\fR
uses
\-C
instead of
\-C \-C
for original location detection\&. It makes blame significantly faster on huge repositories at the expense of less thorough copy detection\&.
.RE
.PP
gui\&.copyblamethreshold
.RS 4
Specifies the threshold to use in
\fIgit gui blame\fR
original location detection, measured in alphanumeric characters\&. See the
\fBgit-blame\fR(1)
manual for more information on copy detection\&.
.RE
.PP
gui\&.blamehistoryctx
.RS 4
Specifies the radius of history context in days to show in
\fBgitk\fR(1)
for the selected commit, when the
Show History Context
menu item is invoked from
\fIgit gui blame\fR\&. If this variable is set to zero, the whole history is shown\&.
.RE
.PP
guitool\&.<name>\&.cmd
.RS 4
Specifies the shell command line to execute when the corresponding item of the
\fBgit-gui\fR(1)
Tools
menu is invoked\&. This option is mandatory for every tool\&. The command is executed from the root of the working directory, and in the environment it receives the name of the tool as
\fIGIT_GUITOOL\fR, the name of the currently selected file as
\fIFILENAME\fR, and the name of the current branch as
\fICUR_BRANCH\fR
(if the head is detached,
\fICUR_BRANCH\fR
is empty)\&.
.RE
.PP
guitool\&.<name>\&.needsfile
.RS 4
Run the tool only if a diff is selected in the GUI\&. It guarantees that
\fIFILENAME\fR
is not empty\&.
.RE
.PP
guitool\&.<name>\&.noconsole
.RS 4
Run the command silently, without creating a window to display its output\&.
.RE
.PP
guitool\&.<name>\&.norescan
.RS 4
Don\(cqt rescan the working directory for changes after the tool finishes execution\&.
.RE
.PP
guitool\&.<name>\&.confirm
.RS 4
Show a confirmation dialog before actually running the tool\&.
.RE
.PP
guitool\&.<name>\&.argprompt
.RS 4
Request a string argument from the user, and pass it to the tool through the
\fIARGS\fR
environment variable\&. Since requesting an argument implies confirmation, the
\fIconfirm\fR
option has no effect if this is enabled\&. If the option is set to
\fItrue\fR,
\fIyes\fR, or
\fI1\fR, the dialog uses a built\-in generic prompt; otherwise the exact value of the variable is used\&.
.RE
.PP
guitool\&.<name>\&.revprompt
.RS 4
Request a single valid revision from the user, and set the
\fIREVISION\fR
environment variable\&. In other aspects this option is similar to
\fIargprompt\fR, and can be used together with it\&.
.RE
.PP
guitool\&.<name>\&.revunmerged
.RS 4
Show only unmerged branches in the
\fIrevprompt\fR
subdialog\&. This is useful for tools similar to merge or rebase, but not for things like checkout or reset\&.
.RE
.PP
guitool\&.<name>\&.title
.RS 4
Specifies the title to use for the prompt dialog\&. The default is the tool name\&.
.RE
.PP
guitool\&.<name>\&.prompt
.RS 4
Specifies the general prompt string to display at the top of the dialog, before subsections for
\fIargprompt\fR
and
\fIrevprompt\fR\&. The default value includes the actual command\&.
.RE
.PP
help\&.browser
.RS 4
Specify the browser that will be used to display help in the
\fIweb\fR
format\&. See
\fBgit-help\fR(1)\&.
.RE
.PP
help\&.format
.RS 4
Override the default help format used by
\fBgit-help\fR(1)\&. Values
\fIman\fR,
\fIinfo\fR,
\fIweb\fR
and
\fIhtml\fR
are supported\&.
\fIman\fR
is the default\&.
\fIweb\fR
and
\fIhtml\fR
are the same\&.
.RE
.PP
help\&.autocorrect
.RS 4
Automatically correct and execute mistyped commands after waiting for the given number of deciseconds (0\&.1 sec)\&. If more than one command can be deduced from the entered text, nothing will be executed\&. If the value of this option is negative, the corrected command will be executed immediately\&. If the value is 0 \- the command will be just shown but not executed\&. This is the default\&.
.RE
.PP
http\&.proxy
.RS 4
Override the HTTP proxy, normally configured using the
\fIhttp_proxy\fR
environment variable (see
\fBcurl\fR(1))\&. This can be overridden on a per\-remote basis; see remote\&.<name>\&.proxy
.RE
.PP
http\&.sslVerify
.RS 4
Whether to verify the SSL certificate when fetching or pushing over HTTPS\&. Can be overridden by the
\fIGIT_SSL_NO_VERIFY\fR
environment variable\&.
.RE
.PP
http\&.sslCert
.RS 4
File containing the SSL certificate when fetching or pushing over HTTPS\&. Can be overridden by the
\fIGIT_SSL_CERT\fR
environment variable\&.
.RE
.PP
http\&.sslKey
.RS 4
File containing the SSL private key when fetching or pushing over HTTPS\&. Can be overridden by the
\fIGIT_SSL_KEY\fR
environment variable\&.
.RE
.PP
http\&.sslCertPasswordProtected
.RS 4
Enable git\(cqs password prompt for the SSL certificate\&. Otherwise OpenSSL will prompt the user, possibly many times, if the certificate or private key is encrypted\&. Can be overridden by the
\fIGIT_SSL_CERT_PASSWORD_PROTECTED\fR
environment variable\&.
.RE
.PP
http\&.sslCAInfo
.RS 4
File containing the certificates to verify the peer with when fetching or pushing over HTTPS\&. Can be overridden by the
\fIGIT_SSL_CAINFO\fR
environment variable\&.
.RE
.PP
http\&.sslCAPath
.RS 4
Path containing files with the CA certificates to verify the peer with when fetching or pushing over HTTPS\&. Can be overridden by the
\fIGIT_SSL_CAPATH\fR
environment variable\&.
.RE
.PP
http\&.maxRequests
.RS 4
How many HTTP requests to launch in parallel\&. Can be overridden by the
\fIGIT_HTTP_MAX_REQUESTS\fR
environment variable\&. Default is 5\&.
.RE
.PP
http\&.minSessions
.RS 4
The number of curl sessions (counted across slots) to be kept across requests\&. They will not be ended with curl_easy_cleanup() until http_cleanup() is invoked\&. If USE_CURL_MULTI is not defined, this value will be capped at 1\&. Defaults to 1\&.
.RE
.PP
http\&.postBuffer
.RS 4
Maximum size in bytes of the buffer used by smart HTTP transports when POSTing data to the remote system\&. For requests larger than this buffer size, HTTP/1\&.1 and Transfer\-Encoding: chunked is used to avoid creating a massive pack file locally\&. Default is 1 MiB, which is sufficient for most requests\&.
.RE
.PP
http\&.lowSpeedLimit, http\&.lowSpeedTime
.RS 4
If the HTTP transfer speed is less than
\fIhttp\&.lowSpeedLimit\fR
for longer than
\fIhttp\&.lowSpeedTime\fR
seconds, the transfer is aborted\&. Can be overridden by the
\fIGIT_HTTP_LOW_SPEED_LIMIT\fR
and
\fIGIT_HTTP_LOW_SPEED_TIME\fR
environment variables\&.
.RE
.PP
http\&.noEPSV
.RS 4
A boolean which disables using of EPSV ftp command by curl\&. This can helpful with some "poor" ftp servers which don\(cqt support EPSV mode\&. Can be overridden by the
\fIGIT_CURL_FTP_NO_EPSV\fR
environment variable\&. Default is false (curl will use EPSV)\&.
.RE
.PP
http\&.useragent
.RS 4
The HTTP USER_AGENT string presented to an HTTP server\&. The default value represents the version of the client git such as git/1\&.7\&.1\&. This option allows you to override this value to a more common value such as Mozilla/4\&.0\&. This may be necessary, for instance, if connecting through a firewall that restricts HTTP connections to a set of common USER_AGENT strings (but not including those like git/1\&.7\&.1)\&. Can be overridden by the
\fIGIT_HTTP_USER_AGENT\fR
environment variable\&.
.RE
.PP
i18n\&.commitEncoding
.RS 4
Character encoding the commit messages are stored in; git itself does not care per se, but this information is necessary e\&.g\&. when importing commits from emails or in the gitk graphical history browser (and possibly at other places in the future or in other porcelains)\&. See e\&.g\&.
\fBgit-mailinfo\fR(1)\&. Defaults to
\fIutf\-8\fR\&.
.RE
.PP
i18n\&.logOutputEncoding
.RS 4
Character encoding the commit messages are converted to when running
\fIgit log\fR
and friends\&.
.RE
.PP
imap
.RS 4
The configuration variables in the
\fIimap\fR
section are described in
\fBgit-imap-send\fR(1)\&.
.RE
.PP
init\&.templatedir
.RS 4
Specify the directory from which templates will be copied\&. (See the "TEMPLATE DIRECTORY" section of
\fBgit-init\fR(1)\&.)
.RE
.PP
instaweb\&.browser
.RS 4
Specify the program that will be used to browse your working repository in gitweb\&. See
\fBgit-instaweb\fR(1)\&.
.RE
.PP
instaweb\&.httpd
.RS 4
The HTTP daemon command\-line to start gitweb on your working repository\&. See
\fBgit-instaweb\fR(1)\&.
.RE
.PP
instaweb\&.local
.RS 4
If true the web server started by
\fBgit-instaweb\fR(1)
will be bound to the local IP (127\&.0\&.0\&.1)\&.
.RE
.PP
instaweb\&.modulepath
.RS 4
The default module path for
\fBgit-instaweb\fR(1)
to use instead of /usr/lib/apache2/modules\&. Only used if httpd is Apache\&.
.RE
.PP
instaweb\&.port
.RS 4
The port number to bind the gitweb httpd to\&. See
\fBgit-instaweb\fR(1)\&.
.RE
.PP
interactive\&.singlekey
.RS 4
In interactive commands, allow the user to provide one\-letter input with a single key (i\&.e\&., without hitting enter)\&. Currently this is used only by the
\-\-patch
mode of
\fBgit-add\fR(1)\&. Note that this setting is silently ignored if portable keystroke input is not available\&.
.RE
.PP
log\&.date
.RS 4
Set the default date\-time mode for the
\fIlog\fR
command\&. Setting a value for log\&.date is similar to using
\fIgit log\fR\(aqs
\-\-date
option\&. Possible values are
relative,
local,
default,
iso,
rfc, and
short; see
\fBgit-log\fR(1)
for details\&.
.RE
.PP
log\&.decorate
.RS 4
Print out the ref names of any commits that are shown by the log command\&. If
\fIshort\fR
is specified, the ref name prefixes
\fIrefs/heads/\fR,
\fIrefs/tags/\fR
and
\fIrefs/remotes/\fR
will not be printed\&. If
\fIfull\fR
is specified, the full ref name (including prefix) will be printed\&. This is the same as the log commands
\fI\-\-decorate\fR
option\&.
.RE
.PP
log\&.showroot
.RS 4
If true, the initial commit will be shown as a big creation event\&. This is equivalent to a diff against an empty tree\&. Tools like
\fBgit-log\fR(1)
or
\fBgit-whatchanged\fR(1), which normally hide the root commit will now show it\&. True by default\&.
.RE
.PP
mailmap\&.file
.RS 4
The location of an augmenting mailmap file\&. The default mailmap, located in the root of the repository, is loaded first, then the mailmap file pointed to by this variable\&. The location of the mailmap file may be in a repository subdirectory, or somewhere outside of the repository itself\&. See
\fBgit-shortlog\fR(1)
and
\fBgit-blame\fR(1)\&.
.RE
.PP
man\&.viewer
.RS 4
Specify the programs that may be used to display help in the
\fIman\fR
format\&. See
\fBgit-help\fR(1)\&.
.RE
.PP
man\&.<tool>\&.cmd
.RS 4
Specify the command to invoke the specified man viewer\&. The specified command is evaluated in shell with the man page passed as argument\&. (See
\fBgit-help\fR(1)\&.)
.RE
.PP
man\&.<tool>\&.path
.RS 4
Override the path for the given tool that may be used to display help in the
\fIman\fR
format\&. See
\fBgit-help\fR(1)\&.
.RE
.PP
merge\&.conflictstyle
.RS 4
Specify the style in which conflicted hunks are written out to working tree files upon merge\&. The default is "merge", which shows a
<<<<<<<
conflict marker, changes made by one side, a
=======
marker, changes made by the other side, and then a
>>>>>>>
marker\&. An alternate style, "diff3", adds a
|||||||
marker and the original text before the
=======
marker\&.
.RE
.PP
merge\&.log
.RS 4
In addition to branch names, populate the log message with at most the specified number of one\-line descriptions from the actual commits that are being merged\&. Defaults to false, and true is a synonym for 20\&.
.RE
.PP
merge\&.renameLimit
.RS 4
The number of files to consider when performing rename detection during a merge; if not specified, defaults to the value of diff\&.renameLimit\&.
.RE
.PP
merge\&.renormalize
.RS 4
Tell git that canonical representation of files in the repository has changed over time (e\&.g\&. earlier commits record text files with CRLF line endings, but recent ones use LF line endings)\&. In such a repository, git can convert the data recorded in commits to a canonical form before performing a merge to reduce unnecessary conflicts\&. For more information, see section "Merging branches with differing checkin/checkout attributes" in
\fBgitattributes\fR(5)\&.
.RE
.PP
merge\&.stat
.RS 4
Whether to print the diffstat between ORIG_HEAD and the merge result at the end of the merge\&. True by default\&.
.RE
.PP
merge\&.tool
.RS 4
Controls which merge resolution program is used by
\fBgit-mergetool\fR(1)\&. Valid built\-in values are: "kdiff3", "tkdiff", "meld", "xxdiff", "emerge", "vimdiff", "gvimdiff", "diffuse", "ecmerge", "tortoisemerge", "p4merge", "araxis" and "opendiff"\&. Any other value is treated is custom merge tool and there must be a corresponding mergetool\&.<tool>\&.cmd option\&.
.RE
.PP
merge\&.verbosity
.RS 4
Controls the amount of output shown by the recursive merge strategy\&. Level 0 outputs nothing except a final error message if conflicts were detected\&. Level 1 outputs only conflicts, 2 outputs conflicts and file changes\&. Level 5 and above outputs debugging information\&. The default is level 2\&. Can be overridden by the
\fIGIT_MERGE_VERBOSITY\fR
environment variable\&.
.RE
.PP
merge\&.<driver>\&.name
.RS 4
Defines a human\-readable name for a custom low\-level merge driver\&. See
\fBgitattributes\fR(5)
for details\&.
.RE
.PP
merge\&.<driver>\&.driver
.RS 4
Defines the command that implements a custom low\-level merge driver\&. See
\fBgitattributes\fR(5)
for details\&.
.RE
.PP
merge\&.<driver>\&.recursive
.RS 4
Names a low\-level merge driver to be used when performing an internal merge between common ancestors\&. See
\fBgitattributes\fR(5)
for details\&.
.RE
.PP
mergetool\&.<tool>\&.path
.RS 4
Override the path for the given tool\&. This is useful in case your tool is not in the PATH\&.
.RE
.PP
mergetool\&.<tool>\&.cmd
.RS 4
Specify the command to invoke the specified merge tool\&. The specified command is evaluated in shell with the following variables available:
\fIBASE\fR
is the name of a temporary file containing the common base of the files to be merged, if available;
\fILOCAL\fR
is the name of a temporary file containing the contents of the file on the current branch;
\fIREMOTE\fR
is the name of a temporary file containing the contents of the file from the branch being merged;
\fIMERGED\fR
contains the name of the file to which the merge tool should write the results of a successful merge\&.
.RE
.PP
mergetool\&.<tool>\&.trustExitCode
.RS 4
For a custom merge command, specify whether the exit code of the merge command can be used to determine whether the merge was successful\&. If this is not set to true then the merge target file timestamp is checked and the merge assumed to have been successful if the file has been updated, otherwise the user is prompted to indicate the success of the merge\&.
.RE
.PP
mergetool\&.keepBackup
.RS 4
After performing a merge, the original file with conflict markers can be saved as a file with a
\&.orig
extension\&. If this variable is set to
false
then this file is not preserved\&. Defaults to
true
(i\&.e\&. keep the backup files)\&.
.RE
.PP
mergetool\&.keepTemporaries
.RS 4
When invoking a custom merge tool, git uses a set of temporary files to pass to the tool\&. If the tool returns an error and this variable is set to
true, then these temporary files will be preserved, otherwise they will be removed after the tool has exited\&. Defaults to
false\&.
.RE
.PP
mergetool\&.prompt
.RS 4
Prompt before each invocation of the merge resolution program\&.
.RE
.PP
notes\&.displayRef
.RS 4
The (fully qualified) refname from which to show notes when showing commit messages\&. The value of this variable can be set to a glob, in which case notes from all matching refs will be shown\&. You may also specify this configuration variable several times\&. A warning will be issued for refs that do not exist, but a glob that does not match any refs is silently ignored\&.
.sp
This setting can be overridden with the
GIT_NOTES_DISPLAY_REF
environment variable, which must be a colon separated list of refs or globs\&.
.sp
The effective value of "core\&.notesRef" (possibly overridden by GIT_NOTES_REF) is also implicitly added to the list of refs to be displayed\&.
.RE
.PP
notes\&.rewrite\&.<command>
.RS 4
When rewriting commits with <command> (currently
amend
or
rebase) and this variable is set to
true, git automatically copies your notes from the original to the rewritten commit\&. Defaults to
true, but see "notes\&.rewriteRef" below\&.
.RE
.PP
notes\&.rewriteMode
.RS 4
When copying notes during a rewrite (see the "notes\&.rewrite\&.<command>" option), determines what to do if the target commit already has a note\&. Must be one of
overwrite,
concatenate, or
ignore\&. Defaults to
concatenate\&.
.sp
This setting can be overridden with the
GIT_NOTES_REWRITE_MODE
environment variable\&.
.RE
.PP
notes\&.rewriteRef
.RS 4
When copying notes during a rewrite, specifies the (fully qualified) ref whose notes should be copied\&. The ref may be a glob, in which case notes in all matching refs will be copied\&. You may also specify this configuration several times\&.
.sp
Does not have a default value; you must configure this variable to enable note rewriting\&.
.sp
This setting can be overridden with the
GIT_NOTES_REWRITE_REF
environment variable, which must be a colon separated list of refs or globs\&.
.RE
.PP
pack\&.window
.RS 4
The size of the window used by
\fBgit-pack-objects\fR(1)
when no window size is given on the command line\&. Defaults to 10\&.
.RE
.PP
pack\&.depth
.RS 4
The maximum delta depth used by
\fBgit-pack-objects\fR(1)
when no maximum depth is given on the command line\&. Defaults to 50\&.
.RE
.PP
pack\&.windowMemory
.RS 4
The window memory size limit used by
\fBgit-pack-objects\fR(1)
when no limit is given on the command line\&. The value can be suffixed with "k", "m", or "g"\&. Defaults to 0, meaning no limit\&.
.RE
.PP
pack\&.compression
.RS 4
An integer \-1\&.\&.9, indicating the compression level for objects in a pack file\&. \-1 is the zlib default\&. 0 means no compression, and 1\&.\&.9 are various speed/size tradeoffs, 9 being slowest\&. If not set, defaults to core\&.compression\&. If that is not set, defaults to \-1, the zlib default, which is "a default compromise between speed and compression (currently equivalent to level 6)\&."
.sp
Note that changing the compression level will not automatically recompress all existing objects\&. You can force recompression by passing the \-F option to
\fBgit-repack\fR(1)\&.
.RE
.PP
pack\&.deltaCacheSize
.RS 4
The maximum memory in bytes used for caching deltas in
\fBgit-pack-objects\fR(1)
before writing them out to a pack\&. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found\&. Repacking large repositories on machines which are tight with memory might be badly impacted by this though, especially if this cache pushes the system into swapping\&. A value of 0 means no limit\&. The smallest size of 1 byte may be used to virtually disable this cache\&. Defaults to 256 MiB\&.
.RE
.PP
pack\&.deltaCacheLimit
.RS 4
The maximum size of a delta, that is cached in
\fBgit-pack-objects\fR(1)\&. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found\&. Defaults to 1000\&.
.RE
.PP
pack\&.threads
.RS 4
Specifies the number of threads to spawn when searching for best delta matches\&. This requires that
\fBgit-pack-objects\fR(1)
be compiled with pthreads otherwise this option is ignored with a warning\&. This is meant to reduce packing time on multiprocessor machines\&. The required amount of memory for the delta search window is however multiplied by the number of threads\&. Specifying 0 will cause git to auto\-detect the number of CPU\(cqs and set the number of threads accordingly\&.
.RE
.PP
pack\&.indexVersion
.RS 4
Specify the default pack index version\&. Valid values are 1 for legacy pack index used by Git versions prior to 1\&.5\&.2, and 2 for the new pack index with capabilities for packs larger than 4 GB as well as proper protection against the repacking of corrupted packs\&. Version 2 is the default\&. Note that version 2 is enforced and this config option ignored whenever the corresponding pack is larger than 2 GB\&.
.sp
If you have an old git that does not understand the version 2
*\&.idx
file, cloning or fetching over a non native protocol (e\&.g\&. "http" and "rsync") that will copy both
*\&.pack
file and corresponding
*\&.idx
file from the other side may give you a repository that cannot be accessed with your older version of git\&. If the
*\&.pack
file is smaller than 2 GB, however, you can use
\fBgit-index-pack\fR(1)
on the *\&.pack file to regenerate the
*\&.idx
file\&.
.RE
.PP
pack\&.packSizeLimit
.RS 4
The maximum size of a pack\&. This setting only affects packing to a file when repacking, i\&.e\&. the git:// protocol is unaffected\&. It can be overridden by the
\-\-max\-pack\-size
option of
\fBgit-repack\fR(1)\&. The minimum size allowed is limited to 1 MiB\&. The default is unlimited\&. Common unit suffixes of
\fIk\fR,
\fIm\fR, or
\fIg\fR
are supported\&.
.RE
.PP
pager\&.<cmd>
.RS 4
If the value is boolean, turns on or off pagination of the output of a particular git subcommand when writing to a tty\&. Otherwise, turns on pagination for the subcommand using the pager specified by the value of
pager\&.<cmd>\&. If
\-\-paginate
or
\-\-no\-pager
is specified on the command line, it takes precedence over this option\&. To disable pagination for all commands, set
core\&.pager
or
GIT_PAGER
to
cat\&.
.RE
.PP
pretty\&.<name>
.RS 4
Alias for a \-\-pretty= format string, as specified in
\fBgit-log\fR(1)\&. Any aliases defined here can be used just as the built\-in pretty formats could\&. For example, running
git config pretty\&.changelog "format:* %H %s"
would cause the invocation
git log \-\-pretty=changelog
to be equivalent to running
git log "\-\-pretty=format:* %H %s"\&. Note that an alias with the same name as a built\-in format will be silently ignored\&.
.RE
.PP
pull\&.octopus
.RS 4
The default merge strategy to use when pulling multiple branches at once\&.
.RE
.PP
pull\&.twohead
.RS 4
The default merge strategy to use when pulling a single branch\&.
.RE
.PP
push\&.default
.RS 4
Defines the action git push should take if no refspec is given on the command line, no refspec is configured in the remote, and no refspec is implied by any of the options given on the command line\&. Possible values are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

nothing
\- do not push anything\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

matching
\- push all matching branches\&. All branches having the same name in both ends are considered to be matching\&. This is the default\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

upstream
\- push the current branch to its upstream branch\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

tracking
\- deprecated synonym for
upstream\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

current
\- push the current branch to a branch of the same name\&.
.RE
.RE
.PP
rebase\&.stat
.RS 4
Whether to show a diffstat of what changed upstream since the last rebase\&. False by default\&.
.RE
.PP
rebase\&.autosquash
.RS 4
If set to true enable
\fI\-\-autosquash\fR
option by default\&.
.RE
.PP
receive\&.autogc
.RS 4
By default, git\-receive\-pack will run "git\-gc \-\-auto" after receiving data from git\-push and updating refs\&. You can stop it by setting this variable to false\&.
.RE
.PP
receive\&.fsckObjects
.RS 4
If it is set to true, git\-receive\-pack will check all received objects\&. It will abort in the case of a malformed object or a broken link\&. The result of an abort are only dangling objects\&. Defaults to false\&.
.RE
.PP
receive\&.unpackLimit
.RS 4
If the number of objects received in a push is below this limit then the objects will be unpacked into loose object files\&. However if the number of received objects equals or exceeds this limit then the received pack will be stored as a pack, after adding any missing delta bases\&. Storing the pack from a push can make the push operation complete faster, especially on slow filesystems\&. If not set, the value of
transfer\&.unpackLimit
is used instead\&.
.RE
.PP
receive\&.denyDeletes
.RS 4
If set to true, git\-receive\-pack will deny a ref update that deletes the ref\&. Use this to prevent such a ref deletion via a push\&.
.RE
.PP
receive\&.denyDeleteCurrent
.RS 4
If set to true, git\-receive\-pack will deny a ref update that deletes the currently checked out branch of a non\-bare repository\&.
.RE
.PP
receive\&.denyCurrentBranch
.RS 4
If set to true or "refuse", git\-receive\-pack will deny a ref update to the currently checked out branch of a non\-bare repository\&. Such a push is potentially dangerous because it brings the HEAD out of sync with the index and working tree\&. If set to "warn", print a warning of such a push to stderr, but allow the push to proceed\&. If set to false or "ignore", allow such pushes with no message\&. Defaults to "refuse"\&.
.RE
.PP
receive\&.denyNonFastForwards
.RS 4
If set to true, git\-receive\-pack will deny a ref update which is not a fast\-forward\&. Use this to prevent such an update via a push, even if that push is forced\&. This configuration variable is set when initializing a shared repository\&.
.RE
.PP
receive\&.updateserverinfo
.RS 4
If set to true, git\-receive\-pack will run git\-update\-server\-info after receiving data from git\-push and updating refs\&.
.RE
.PP
remote\&.<name>\&.url
.RS 4
The URL of a remote repository\&. See
\fBgit-fetch\fR(1)
or
\fBgit-push\fR(1)\&.
.RE
.PP
remote\&.<name>\&.pushurl
.RS 4
The push URL of a remote repository\&. See
\fBgit-push\fR(1)\&.
.RE
.PP
remote\&.<name>\&.proxy
.RS 4
For remotes that require curl (http, https and ftp), the URL to the proxy to use for that remote\&. Set to the empty string to disable proxying for that remote\&.
.RE
.PP
remote\&.<name>\&.fetch
.RS 4
The default set of "refspec" for
\fBgit-fetch\fR(1)\&. See
\fBgit-fetch\fR(1)\&.
.RE
.PP
remote\&.<name>\&.push
.RS 4
The default set of "refspec" for
\fBgit-push\fR(1)\&. See
\fBgit-push\fR(1)\&.
.RE
.PP
remote\&.<name>\&.mirror
.RS 4
If true, pushing to this remote will automatically behave as if the
\-\-mirror
option was given on the command line\&.
.RE
.PP
remote\&.<name>\&.skipDefaultUpdate
.RS 4
If true, this remote will be skipped by default when updating using
\fBgit-fetch\fR(1)
or the
update
subcommand of
\fBgit-remote\fR(1)\&.
.RE
.PP
remote\&.<name>\&.skipFetchAll
.RS 4
If true, this remote will be skipped by default when updating using
\fBgit-fetch\fR(1)
or the
update
subcommand of
\fBgit-remote\fR(1)\&.
.RE
.PP
remote\&.<name>\&.receivepack
.RS 4
The default program to execute on the remote side when pushing\&. See option \-\-receive\-pack of
\fBgit-push\fR(1)\&.
.RE
.PP
remote\&.<name>\&.uploadpack
.RS 4
The default program to execute on the remote side when fetching\&. See option \-\-upload\-pack of
\fBgit-fetch-pack\fR(1)\&.
.RE
.PP
remote\&.<name>\&.tagopt
.RS 4
Setting this value to \-\-no\-tags disables automatic tag following when fetching from remote <name>\&. Setting it to \-\-tags will fetch every tag from remote <name>, even if they are not reachable from remote branch heads\&. Passing these flags directly to
\fBgit-fetch\fR(1)
can override this setting\&. See options \-\-tags and \-\-no\-tags of
\fBgit-fetch\fR(1)\&.
.RE
.PP
remote\&.<name>\&.vcs
.RS 4
Setting this to a value <vcs> will cause git to interact with the remote with the git\-remote\-<vcs> helper\&.
.RE
.PP
remotes\&.<group>
.RS 4
The list of remotes which are fetched by "git remote update <group>"\&. See
\fBgit-remote\fR(1)\&.
.RE
.PP
repack\&.usedeltabaseoffset
.RS 4
By default,
\fBgit-repack\fR(1)
creates packs that use delta\-base offset\&. If you need to share your repository with git older than version 1\&.4\&.4, either directly or via a dumb protocol such as http, then you need to set this option to "false" and repack\&. Access from old git versions over the native protocol are unaffected by this option\&.
.RE
.PP
rerere\&.autoupdate
.RS 4
When set to true,
git\-rerere
updates the index with the resulting contents after it cleanly resolves conflicts using previously recorded resolution\&. Defaults to false\&.
.RE
.PP
rerere\&.enabled
.RS 4
Activate recording of resolved conflicts, so that identical conflict hunks can be resolved automatically, should they be encountered again\&.
\fBgit-rerere\fR(1)
command is by default enabled if you create
rr\-cache
directory under
$GIT_DIR, but can be disabled by setting this option to false\&.
.RE
.PP
sendemail\&.identity
.RS 4
A configuration identity\&. When given, causes values in the
\fIsendemail\&.<identity>\fR
subsection to take precedence over values in the
\fIsendemail\fR
section\&. The default identity is the value of
\fIsendemail\&.identity\fR\&.
.RE
.PP
sendemail\&.smtpencryption
.RS 4
See
\fBgit-send-email\fR(1)
for description\&. Note that this setting is not subject to the
\fIidentity\fR
mechanism\&.
.RE
.PP
sendemail\&.smtpssl
.RS 4
Deprecated alias for
\fIsendemail\&.smtpencryption = ssl\fR\&.
.RE
.PP
sendemail\&.<identity>\&.*
.RS 4
Identity\-specific versions of the
\fIsendemail\&.*\fR
parameters found below, taking precedence over those when the this identity is selected, through command\-line or
\fIsendemail\&.identity\fR\&.
.RE
.PP
sendemail\&.aliasesfile, sendemail\&.aliasfiletype, sendemail\&.bcc, sendemail\&.cc, sendemail\&.cccmd, sendemail\&.chainreplyto, sendemail\&.confirm, sendemail\&.envelopesender, sendemail\&.from, sendemail\&.multiedit, sendemail\&.signedoffbycc, sendemail\&.smtppass, sendemail\&.suppresscc, sendemail\&.suppressfrom, sendemail\&.to, sendemail\&.smtpdomain, sendemail\&.smtpserver, sendemail\&.smtpserverport, sendemail\&.smtpserveroption, sendemail\&.smtpuser, sendemail\&.thread, sendemail\&.validate
.RS 4
See
\fBgit-send-email\fR(1)
for description\&.
.RE
.PP
sendemail\&.signedoffcc
.RS 4
Deprecated alias for
\fIsendemail\&.signedoffbycc\fR\&.
.RE
.PP
showbranch\&.default
.RS 4
The default set of branches for
\fBgit-show-branch\fR(1)\&. See
\fBgit-show-branch\fR(1)\&.
.RE
.PP
status\&.relativePaths
.RS 4
By default,
\fBgit-status\fR(1)
shows paths relative to the current directory\&. Setting this variable to
false
shows paths relative to the repository root (this was the default for git prior to v1\&.5\&.4)\&.
.RE
.PP
status\&.showUntrackedFiles
.RS 4
By default,
\fBgit-status\fR(1)
and
\fBgit-commit\fR(1)
show files which are not currently tracked by Git\&. Directories which contain only untracked files, are shown with the directory name only\&. Showing untracked files means that Git needs to lstat() all all the files in the whole repository, which might be slow on some systems\&. So, this variable controls how the commands displays the untracked files\&. Possible values are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

no
\- Show no untracked files\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

normal
\- Show untracked files and directories\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}

all
\- Show also individual files in untracked directories\&.
.RE
.RS 4
If this variable is not specified, it defaults to
\fInormal\fR\&. This variable can be overridden with the \-u|\-\-untracked\-files option of
\fBgit-status\fR(1)
and
\fBgit-commit\fR(1)\&.
.RE
.PP
status\&.submodulesummary
.RS 4
Defaults to false\&. If this is set to a non zero number or true (identical to \-1 or an unlimited number), the submodule summary will be enabled and a summary of commits for modified submodules will be shown (see \-\-summary\-limit option of
\fBgit-submodule\fR(1))\&.
.RE
.PP
submodule\&.<name>\&.path, submodule\&.<name>\&.url, submodule\&.<name>\&.update
.RS 4
The path within this project, URL, and the updating strategy for a submodule\&. These variables are initially populated by
\fIgit submodule init\fR; edit them to override the URL and other values found in the
\&.gitmodules
file\&. See
\fBgit-submodule\fR(1)
and
\fBgitmodules\fR(5)
for details\&.
.RE
.PP
submodule\&.<name>\&.fetchRecurseSubmodules
.RS 4
This option can be used to enable/disable recursive fetching of this submodule\&. It can be overridden by using the \-\-[no\-]recurse\-submodules command line option to "git fetch" and "git pull"\&. This setting will override that from in the
\fBgitmodules\fR(5)
file\&.
.RE
.PP
submodule\&.<name>\&.ignore
.RS 4
Defines under what circumstances "git status" and the diff family show a submodule as modified\&. When set to "all", it will never be considered modified, "dirty" will ignore all changes to the submodules work tree and takes only differences between the HEAD of the submodule and the commit recorded in the superproject into account\&. "untracked" will additionally let submodules with modified tracked files in their work tree show up\&. Using "none" (the default when this option is not set) also shows submodules that have untracked files in their work tree as changed\&. This setting overrides any setting made in \&.gitmodules for this submodule, both settings can be overridden on the command line by using the "\-\-ignore\-submodules" option\&.
.RE
.PP
tar\&.umask
.RS 4
This variable can be used to restrict the permission bits of tar archive entries\&. The default is 0002, which turns off the world write bit\&. The special value "user" indicates that the archiving user\(cqs umask will be used instead\&. See umask(2) and
\fBgit-archive\fR(1)\&.
.RE
.PP
transfer\&.unpackLimit
.RS 4
When
fetch\&.unpackLimit
or
receive\&.unpackLimit
are not set, the value of this variable is used instead\&. The default value is 100\&.
.RE
.PP
url\&.<base>\&.insteadOf
.RS 4
Any URL that starts with this value will be rewritten to start, instead, with <base>\&. In cases where some site serves a large number of repositories, and serves them with multiple access methods, and some users need to use different access methods, this feature allows people to specify any of the equivalent URLs and have git automatically rewrite the URL to the best alternative for the particular user, even for a never\-before\-seen repository on the site\&. When more than one insteadOf strings match a given URL, the longest match is used\&.
.RE
.PP
url\&.<base>\&.pushInsteadOf
.RS 4
Any URL that starts with this value will not be pushed to; instead, it will be rewritten to start with <base>, and the resulting URL will be pushed to\&. In cases where some site serves a large number of repositories, and serves them with multiple access methods, some of which do not allow push, this feature allows people to specify a pull\-only URL and have git automatically use an appropriate URL to push, even for a never\-before\-seen repository on the site\&. When more than one pushInsteadOf strings match a given URL, the longest match is used\&. If a remote has an explicit pushurl, git will ignore this setting for that remote\&.
.RE
.PP
user\&.email
.RS 4
Your email address to be recorded in any newly created commits\&. Can be overridden by the
\fIGIT_AUTHOR_EMAIL\fR,
\fIGIT_COMMITTER_EMAIL\fR, and
\fIEMAIL\fR
environment variables\&. See
\fBgit-commit-tree\fR(1)\&.
.RE
.PP
user\&.name
.RS 4
Your full name to be recorded in any newly created commits\&. Can be overridden by the
\fIGIT_AUTHOR_NAME\fR
and
\fIGIT_COMMITTER_NAME\fR
environment variables\&. See
\fBgit-commit-tree\fR(1)\&.
.RE
.PP
user\&.signingkey
.RS 4
If
\fBgit-tag\fR(1)
is not selecting the key you want it to automatically when creating a signed tag, you can override the default selection with this variable\&. This option is passed unchanged to gpg\(cqs \-\-local\-user parameter, so you may specify a key using any method that gpg supports\&.
.RE
.PP
web\&.browser
.RS 4
Specify a web browser that may be used by some commands\&. Currently only
\fBgit-instaweb\fR(1)
and
\fBgit-help\fR(1)
may use it\&.
.RE
.SH "AUTHOR"
.sp
Written by Johannes Schindelin <\m[blue]\fBJohannes\&.Schindelin@gmx\&.de\fR\m[]\&\s-2\u[1]\d\s+2>
.SH "DOCUMENTATION"
.sp
Documentation by Johannes Schindelin, Petr Baudis and the git\-list <\m[blue]\fBgit@vger\&.kernel\&.org\fR\m[]\&\s-2\u[2]\d\s+2>\&.
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
Johannes.Schindelin@gmx.de
.RS 4
\%mailto:Johannes.Schindelin@gmx.de
.RE
.IP " 2." 4
git@vger.kernel.org
.RS 4
\%mailto:git@vger.kernel.org
.RE
