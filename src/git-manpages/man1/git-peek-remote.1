'\" t
.\"     Title: git-peek-remote
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 06/01/2011
.\"    Manual: Git Manual
.\"    Source: Git 1.7.5.4
.\"  Language: English
.\"
.TH "GIT\-PEEK\-REMOTE" "1" "06/01/2011" "Git 1\&.7\&.5\&.4" "Git Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-peek-remote \- List the references in a remote repository
.SH "SYNOPSIS"
.sp
\fIgit peek\-remote\fR [\-\-upload\-pack=<git\-upload\-pack>] [<host>:]<directory>
.SH "DESCRIPTION"
.sp
This command is deprecated; use \fIgit ls\-remote\fR instead\&.
.SH "OPTIONS"
.PP
\-\-upload\-pack=<git\-upload\-pack>
.RS 4
Use this to specify the path to
\fIgit\-upload\-pack\fR
on the remote side, if it is not found on your $PATH\&. Some installations of sshd ignores the user\(cqs environment setup scripts for login shells (e\&.g\&. \&.bash_profile) and your privately installed git may not be found on the system default $PATH\&. Another workaround suggested is to set up your $PATH in "\&.bashrc", but this flag is for people who do not want to pay the overhead for non\-interactive shells, but prefer having a lean \&.bashrc file (they set most of the things up in \&.bash_profile)\&.
.RE
.PP
<host>
.RS 4
A remote host that houses the repository\&. When this part is specified,
\fIgit\-upload\-pack\fR
is invoked via ssh\&.
.RE
.PP
<directory>
.RS 4
The repository to sync from\&.
.RE
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
