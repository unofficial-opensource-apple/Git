'\" t
.\"     Title: git-format-patch
.\"    Author: [see the "Author" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 04/06/2011
.\"    Manual: Git Manual
.\"    Source: Git 1.7.4.4
.\"  Language: English
.\"
.TH "GIT\-FORMAT\-PATCH" "1" "04/06/2011" "Git 1\&.7\&.4\&.4" "Git Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-format-patch \- Prepare patches for e\-mail submission
.SH "SYNOPSIS"
.sp
.nf
\fIgit format\-patch\fR [\-k] [(\-o|\-\-output\-directory) <dir> | \-\-stdout]
                   [\-\-no\-thread | \-\-thread[=<style>]]
                   [(\-\-attach|\-\-inline)[=<boundary>] | \-\-no\-attach]
                   [\-s | \-\-signoff]
                   [\-\-signature=<signature> | \-\-no\-signature]
                   [\-n | \-\-numbered | \-N | \-\-no\-numbered]
                   [\-\-start\-number <n>] [\-\-numbered\-files]
                   [\-\-in\-reply\-to=Message\-Id] [\-\-suffix=\&.<sfx>]
                   [\-\-ignore\-if\-in\-upstream]
                   [\-\-subject\-prefix=Subject\-Prefix]
                   [\-\-to=<email>] [\-\-cc=<email>]
                   [\-\-cover\-letter]
                   [<common diff options>]
                   [ <since> | <revision range> ]
.fi
.sp
.SH "DESCRIPTION"
.sp
Prepare each commit with its patch in one file per commit, formatted to resemble UNIX mailbox format\&. The output of this command is convenient for e\-mail submission or for use with \fIgit am\fR\&.
.sp
There are two ways to specify which commits to operate on\&.
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
A single commit, <since>, specifies that the commits leading to the tip of the current branch that are not in the history that leads to the <since> to be output\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Generic <revision range> expression (see "SPECIFYING REVISIONS" section in
\fBgitrevisions\fR(7)) means the commits in the specified range\&.
.RE
.sp
The first rule takes precedence in the case of a single <commit>\&. To apply the second rule, i\&.e\&., format everything since the beginning of history up until <commit>, use the \fI\-\-root\fR option: git format\-patch \-\-root <commit>\&. If you want to format only <commit> itself, you can do this with git format\-patch \-1 <commit>\&.
.sp
By default, each output file is numbered sequentially from 1, and uses the first line of the commit message (massaged for pathname safety) as the filename\&. With the \-\-numbered\-files option, the output file names will only be numbers, without the first line of the commit appended\&. The names of the output files are printed to standard output, unless the \-\-stdout option is specified\&.
.sp
If \-o is specified, output files are created in <dir>\&. Otherwise they are created in the current working directory\&.
.sp
By default, the subject of a single patch is "[PATCH] First Line" and the subject when multiple patches are output is "[PATCH n/m] First Line"\&. To force 1/1 to be added for a single patch, use \-n\&. To omit patch numbers from the subject, use \-N\&.
.sp
If given \-\-thread, git\-format\-patch will generate In\-Reply\-To and References headers to make the second and subsequent patch mails appear as replies to the first mail; this also generates a Message\-Id header to reference\&.
.SH "OPTIONS"
.PP
\-p, \-\-no\-stat
.RS 4
Generate plain patches without any diffstats\&.
.RE
.PP
\-U<n>, \-\-unified=<n>
.RS 4
Generate diffs with <n> lines of context instead of the usual three\&.
.RE
.PP
\-\-patience
.RS 4
Generate a diff using the "patience diff" algorithm\&.
.RE
.PP
\-\-stat[=<width>[,<name\-width>]]
.RS 4
Generate a diffstat\&. You can override the default output width for 80\-column terminal by
\-\-stat=<width>\&. The width of the filename part can be controlled by giving another width to it separated by a comma\&.
.RE
.PP
\-\-numstat
.RS 4
Similar to
\-\-stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly\&. For binary files, outputs two
\-
instead of saying
0 0\&.
.RE
.PP
\-\-shortstat
.RS 4
Output only the last line of the
\-\-stat
format containing total number of modified files, as well as number of added and deleted lines\&.
.RE
.PP
\-\-dirstat[=<limit>]
.RS 4
Output the distribution of relative amount of changes (number of lines added or removed) for each sub\-directory\&. Directories with changes below a cut\-off percent (3% by default) are not shown\&. The cut\-off percent can be set with
\-\-dirstat=<limit>\&. Changes in a child directory are not counted for the parent directory, unless
\-\-cumulative
is used\&.
.RE
.PP
\-\-dirstat\-by\-file[=<limit>]
.RS 4
Same as
\-\-dirstat, but counts changed files instead of lines\&.
.RE
.PP
\-\-summary
.RS 4
Output a condensed summary of extended header information such as creations, renames and mode changes\&.
.RE
.PP
\-\-no\-renames
.RS 4
Turn off rename detection, even when the configuration file gives the default to do so\&.
.RE
.PP
\-\-full\-index
.RS 4
Instead of the first handful of characters, show the full pre\- and post\-image blob object names on the "index" line when generating patch format output\&.
.RE
.PP
\-\-binary
.RS 4
In addition to
\-\-full\-index, output a binary diff that can be applied with
git\-apply\&.
.RE
.PP
\-\-abbrev[=<n>]
.RS 4
Instead of showing the full 40\-byte hexadecimal object name in diff\-raw format output and diff\-tree header lines, show only a partial prefix\&. This is independent of the
\-\-full\-index
option above, which controls the diff\-patch output format\&. Non default number of digits can be specified with
\-\-abbrev=<n>\&.
.RE
.PP
\-B[<n>][/<m>], \-\-break\-rewrites[=[<n>][/<m>]]
.RS 4
Break complete rewrite changes into pairs of delete and create\&. This serves two purposes:
.sp
It affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number
m
controls this aspect of the \-B option (defaults to 60%)\&.
\-B/70%
specifies that less than 30% of the original should remain in the result for git to consider it a total rewrite (i\&.e\&. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines)\&.
.sp
When used with \-M, a totally\-rewritten file is also considered as the source of a rename (usually \-M only considers a file that disappeared as the source of a rename), and the number
n
controls this aspect of the \-B option (defaults to 50%)\&.
\-B20%
specifies that a change with addition and deletion compared to 20% or more of the file\(cqs size are eligible for being picked up as a possible source of a rename to another file\&.
.RE
.PP
\-M[<n>], \-\-find\-renames[=<n>]
.RS 4
Detect renames\&. If
n
is specified, it is a is a threshold on the similarity index (i\&.e\&. amount of addition/deletions compared to the file\(cqs size)\&. For example,
\-M90%
means git should consider a delete/add pair to be a rename if more than 90% of the file hasn\(cqt changed\&.
.RE
.PP
\-C[<n>], \-\-find\-copies[=<n>]
.RS 4
Detect copies as well as renames\&. See also
\-\-find\-copies\-harder\&. If
n
is specified, it has the same meaning as for
\-M<n>\&.
.RE
.PP
\-\-find\-copies\-harder
.RS 4
For performance reasons, by default,
\-C
option finds copies only if the original file of the copy was modified in the same changeset\&. This flag makes the command inspect unmodified files as candidates for the source of copy\&. This is a very expensive operation for large projects, so use it with caution\&. Giving more than one
\-C
option has the same effect\&.
.RE
.PP
\-l<num>
.RS 4
The
\-M
and
\-C
options require O(n^2) processing time where n is the number of potential rename/copy targets\&. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number\&.
.RE
.PP
\-O<orderfile>
.RS 4
Output the patch in the order specified in the <orderfile>, which has one shell glob pattern per line\&.
.RE
.PP
\-a, \-\-text
.RS 4
Treat all files as text\&.
.RE
.PP
\-\-ignore\-space\-at\-eol
.RS 4
Ignore changes in whitespace at EOL\&.
.RE
.PP
\-b, \-\-ignore\-space\-change
.RS 4
Ignore changes in amount of whitespace\&. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent\&.
.RE
.PP
\-w, \-\-ignore\-all\-space
.RS 4
Ignore whitespace when comparing lines\&. This ignores differences even if one line has whitespace where the other line has none\&.
.RE
.PP
\-\-inter\-hunk\-context=<lines>
.RS 4
Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other\&.
.RE
.PP
\-\-ext\-diff
.RS 4
Allow an external diff helper to be executed\&. If you set an external diff driver with
\fBgitattributes\fR(5), you need to use this option with
\fBgit-log\fR(1)
and friends\&.
.RE
.PP
\-\-no\-ext\-diff
.RS 4
Disallow external diff drivers\&.
.RE
.PP
\-\-ignore\-submodules[=<when>]
.RS 4
Ignore changes to submodules in the diff generation\&. <when> can be either "none", "untracked", "dirty" or "all", which is the default Using "none" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the
\fIignore\fR
option in
\fBgit-config\fR(1)
or
\fBgitmodules\fR(5)\&. When "untracked" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content)\&. Using "dirty" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1\&.7\&.0)\&. Using "all" hides all changes to submodules\&.
.RE
.PP
\-\-src\-prefix=<prefix>
.RS 4
Show the given source prefix instead of "a/"\&.
.RE
.PP
\-\-dst\-prefix=<prefix>
.RS 4
Show the given destination prefix instead of "b/"\&.
.RE
.PP
\-\-no\-prefix
.RS 4
Do not show any source or destination prefix\&.
.RE
.sp
For more detailed explanation on these common options, see also \fBgitdiffcore\fR(7)\&.
.PP
\-<n>
.RS 4
Prepare patches from the topmost <n> commits\&.
.RE
.PP
\-o <dir>, \-\-output\-directory <dir>
.RS 4
Use <dir> to store the resulting files, instead of the current working directory\&.
.RE
.PP
\-n, \-\-numbered
.RS 4
Name output in
\fI[PATCH n/m]\fR
format, even with a single patch\&.
.RE
.PP
\-N, \-\-no\-numbered
.RS 4
Name output in
\fI[PATCH]\fR
format\&.
.RE
.PP
\-\-start\-number <n>
.RS 4
Start numbering the patches at <n> instead of 1\&.
.RE
.PP
\-\-numbered\-files
.RS 4
Output file names will be a simple number sequence without the default first line of the commit appended\&.
.RE
.PP
\-k, \-\-keep\-subject
.RS 4
Do not strip/add
\fI[PATCH]\fR
from the first line of the commit log message\&.
.RE
.PP
\-s, \-\-signoff
.RS 4
Add
Signed\-off\-by:
line to the commit message, using the committer identity of yourself\&.
.RE
.PP
\-\-stdout
.RS 4
Print all commits to the standard output in mbox format, instead of creating a file for each one\&.
.RE
.PP
\-\-attach[=<boundary>]
.RS 4
Create multipart/mixed attachment, the first part of which is the commit message and the patch itself in the second part, with
Content\-Disposition: attachment\&.
.RE
.PP
\-\-no\-attach
.RS 4
Disable the creation of an attachment, overriding the configuration setting\&.
.RE
.PP
\-\-inline[=<boundary>]
.RS 4
Create multipart/mixed attachment, the first part of which is the commit message and the patch itself in the second part, with
Content\-Disposition: inline\&.
.RE
.PP
\-\-thread[=<style>], \-\-no\-thread
.RS 4
Controls addition of
In\-Reply\-To
and
References
headers to make the second and subsequent mails appear as replies to the first\&. Also controls generation of the
Message\-Id
header to reference\&.
.sp
The optional <style> argument can be either
shallow
or
deep\&.
\fIshallow\fR
threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the
\-\-in\-reply\-to, and the first patch mail, in this order\&.
\fIdeep\fR
threading makes every mail a reply to the previous one\&.
.sp
The default is
\-\-no\-thread, unless the
\fIformat\&.thread\fR
configuration is set\&. If
\-\-thread
is specified without a style, it defaults to the style specified by
\fIformat\&.thread\fR
if any, or else
shallow\&.
.sp
Beware that the default for
\fIgit send\-email\fR
is to thread emails itself\&. If you want
git format\-patch
to take care of threading, you will want to ensure that threading is disabled for
git send\-email\&.
.RE
.PP
\-\-in\-reply\-to=Message\-Id
.RS 4
Make the first mail (or all the mails with
\-\-no\-thread) appear as a reply to the given Message\-Id, which avoids breaking threads to provide a new patch series\&.
.RE
.PP
\-\-ignore\-if\-in\-upstream
.RS 4
Do not include a patch that matches a commit in <until>\&.\&.<since>\&. This will examine all patches reachable from <since> but not from <until> and compare them with the patches being generated, and any patch that matches is ignored\&.
.RE
.PP
\-\-subject\-prefix=<Subject\-Prefix>
.RS 4
Instead of the standard
\fI[PATCH]\fR
prefix in the subject line, instead use
\fI[<Subject\-Prefix>]\fR\&. This allows for useful naming of a patch series, and can be combined with the
\-\-numbered
option\&.
.RE
.PP
\-\-to=<email>
.RS 4
Add a
To:
header to the email headers\&. This is in addition to any configured headers, and may be used multiple times\&.
.RE
.PP
\-\-cc=<email>
.RS 4
Add a
Cc:
header to the email headers\&. This is in addition to any configured headers, and may be used multiple times\&.
.RE
.PP
\-\-add\-header=<header>
.RS 4
Add an arbitrary header to the email headers\&. This is in addition to any configured headers, and may be used multiple times\&. For example,
\-\-add\-header="Organization: git\-foo"
.RE
.PP
\-\-cover\-letter
.RS 4
In addition to the patches, generate a cover letter file containing the shortlog and the overall diffstat\&. You can fill in a description in the file before sending it out\&.
.RE
.PP
\-\-[no]\-signature=<signature>
.RS 4
Add a signature to each message produced\&. Per RFC 3676 the signature is separated from the body by a line with \(aq\-\- \(aq on it\&. If the signature option is omitted the signature defaults to the git version number\&.
.RE
.PP
\-\-suffix=\&.<sfx>
.RS 4
Instead of using
\&.patch
as the suffix for generated filenames, use specified suffix\&. A common alternative is
\-\-suffix=\&.txt\&. Leaving this empty will remove the
\&.patch
suffix\&.
.sp
Note that the leading character does not have to be a dot; for example, you can use
\-\-suffix=\-patch
to get
0001\-description\-of\-my\-change\-patch\&.
.RE
.PP
\-\-no\-binary
.RS 4
Do not output contents of changes in binary files, instead display a notice that those files changed\&. Patches generated using this option cannot be applied properly, but they are still useful for code review\&.
.RE
.PP
\-\-root
.RS 4
Treat the revision argument as a <revision range>, even if it is just a single commit (that would normally be treated as a <since>)\&. Note that root commits included in the specified range are always formatted as creation patches, independently of this flag\&.
.RE
.SH "CONFIGURATION"
.sp
You can specify extra mail header lines to be added to each message, defaults for the subject prefix and file suffix, number patches when outputting more than one patch, add "To" or "Cc:" headers, configure attachments, and sign off patches with configuration variables\&.
.sp
.if n \{\
.RS 4
.\}
.nf
[format]
        headers = "Organization: git\-foo\en"
        subjectprefix = CHANGE
        suffix = \&.txt
        numbered = auto
        to = <email>
        cc = <email>
        attach [ = mime\-boundary\-string ]
        signoff = true
.fi
.if n \{\
.RE
.\}
.sp
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Extract commits between revisions R1 and R2, and apply them on top of the current branch using
\fIgit am\fR
to cherry\-pick them:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git format\-patch \-k \-\-stdout R1\&.\&.R2 | git am \-3 \-k
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Extract all commits which are in the current branch but not in the origin branch:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git format\-patch origin
.fi
.if n \{\
.RE
.\}
.sp
For each commit a separate file is created in the current directory\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Extract all commits that lead to
\fIorigin\fR
since the inception of the project:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git format\-patch \-\-root origin
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The same as the previous one:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git format\-patch \-M \-B origin
.fi
.if n \{\
.RE
.\}
.sp
Additionally, it detects and handles renames and complete rewrites intelligently to produce a renaming patch\&. A renaming patch reduces the amount of text output, and generally makes it easier to review\&. Note that non\-git "patch" programs won\(cqt understand renaming patches, so use it only when you know the recipient uses git to apply your patch\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Extract three topmost commits from the current branch and format them as e\-mailable patches:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git format\-patch \-3
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SH "SEE ALSO"
.sp
\fBgit-am\fR(1), \fBgit-send-email\fR(1)
.SH "AUTHOR"
.sp
Written by Junio C Hamano <\m[blue]\fBgitster@pobox\&.com\fR\m[]\&\s-2\u[1]\d\s+2>
.SH "DOCUMENTATION"
.sp
Documentation by Junio C Hamano and the git\-list <\m[blue]\fBgit@vger\&.kernel\&.org\fR\m[]\&\s-2\u[2]\d\s+2>\&.
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
gitster@pobox.com
.RS 4
\%mailto:gitster@pobox.com
.RE
.IP " 2." 4
git@vger.kernel.org
.RS 4
\%mailto:git@vger.kernel.org
.RE
