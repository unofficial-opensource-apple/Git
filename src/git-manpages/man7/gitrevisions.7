'\" t
.\"     Title: gitrevisions
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 04/06/2011
.\"    Manual: Git Manual
.\"    Source: Git 1.7.4.4
.\"  Language: English
.\"
.TH "GITREVISIONS" "7" "04/06/2011" "Git 1\&.7\&.4\&.4" "Git Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitrevisions \- specifying revisions and ranges for git
.SH "SYNOPSIS"
.sp
gitrevisions
.SH "DESCRIPTION"
.sp
Many Git commands take revision parameters as arguments\&. Depending on the command, they denote a specific commit or, for commands which walk the revision graph (such as \fBgit-log\fR(1)), all commits which can be reached from that commit\&. In the latter case one can also specify a range of revisions explicitly\&.
.sp
In addition, some Git commands (such as \fBgit-show\fR(1)) also take revision parameters which denote other objects than commits, e\&.g\&. blobs ("files") or trees ("directories of files")\&.
.SH "SPECIFYING REVISIONS"
.sp
A revision parameter typically, but not necessarily, names a commit object\&. They use what is called an \fIextended SHA1\fR syntax\&. Here are various ways to spell object names\&. The ones listed near the end of this list are to name trees and blobs contained in a commit\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The full SHA1 object name (40\-byte hexadecimal string), or a substring of such that is unique within the repository\&. E\&.g\&. dae86e1950b1277e545cee180551750029cfe735 and dae86e both name the same commit object if there are no other object in your repository whose object name starts with dae86e\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
An output from
\fIgit describe\fR; i\&.e\&. a closest tag, optionally followed by a dash and a number of commits, followed by a dash, a
g, and an abbreviated object name\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A symbolic ref name\&. E\&.g\&.
\fImaster\fR
typically means the commit object referenced by refs/heads/master\&. If you happen to have both heads/master and tags/master, you can explicitly say
\fIheads/master\fR
to tell git which one you mean\&. When ambiguous, a
<name>
is disambiguated by taking the first match in the following rules:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
if
$GIT_DIR/<name>
exists, that is what you mean (this is usually useful only for
HEAD,
FETCH_HEAD,
ORIG_HEAD
and
MERGE_HEAD);
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
otherwise,
refs/<name>
if exists;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
otherwise,
refs/tags/<name>
if exists;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
otherwise,
refs/heads/<name>
if exists;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
otherwise,
refs/remotes/<name>
if exists;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
otherwise,
refs/remotes/<name>/HEAD
if exists\&.
.sp
HEAD names the commit your changes in the working tree is based on\&. FETCH_HEAD records the branch you fetched from a remote repository with your last
\fIgit fetch\fR
invocation\&. ORIG_HEAD is created by commands that moves your HEAD in a drastic way, to record the position of the HEAD before their operation, so that you can change the tip of the branch back to the state before you ran them easily\&. MERGE_HEAD records the commit(s) you are merging into your branch when you run
\fIgit merge\fR\&.
.sp
Note that any of the
refs/*
cases above may come either from the
$GIT_DIR/refs
directory or from the
$GIT_DIR/packed\-refs
file\&.
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A ref followed by the suffix
\fI@\fR
with a date specification enclosed in a brace pair (e\&.g\&.
\fI{yesterday}\fR,
\fI{1 month 2 weeks 3 days 1 hour 1 second ago}\fR
or
\fI{1979\-02\-26 18:30:00}\fR) to specify the value of the ref at a prior point in time\&. This suffix may only be used immediately following a ref name and the ref must have an existing log ($GIT_DIR/logs/<ref>)\&. Note that this looks up the state of your
\fBlocal\fR
ref at a given time; e\&.g\&., what was in your local
master
branch last week\&. If you want to look at commits made during certain times, see
\-\-since
and
\-\-until\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A ref followed by the suffix
\fI@\fR
with an ordinal specification enclosed in a brace pair (e\&.g\&.
\fI{1}\fR,
\fI{15}\fR) to specify the n\-th prior value of that ref\&. For example
\fImaster@{1}\fR
is the immediate prior value of
\fImaster\fR
while
\fImaster@{5}\fR
is the 5th prior value of
\fImaster\fR\&. This suffix may only be used immediately following a ref name and the ref must have an existing log ($GIT_DIR/logs/<ref>)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
You can use the
\fI@\fR
construct with an empty ref part to get at a reflog of the current branch\&. For example, if you are on the branch
\fIblabla\fR, then
\fI@{1}\fR
means the same as
\fIblabla@{1}\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The special construct
\fI@{\-<n>}\fR
means the <n>th branch checked out before the current one\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The suffix
\fI@{upstream}\fR
to a ref (short form
\fIref@{u}\fR) refers to the branch the ref is set to build on top of\&. Missing ref defaults to the current branch\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A suffix
\fI^\fR
to a revision parameter (e\&.g\&.
\fIHEAD^\fR) means the first parent of that commit object\&.
\fI^<n>\fR
means the <n>th parent (i\&.e\&.
\fIrev^\fR
is equivalent to
\fIrev^1\fR)\&. As a special rule,
\fIrev^0\fR
means the commit itself and is used when
\fIrev\fR
is the object name of a tag object that refers to a commit object\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A suffix
\fI~<n>\fR
to a revision parameter means the commit object that is the <n>th generation grand\-parent of the named commit object, following only the first parent\&. I\&.e\&. rev~3 is equivalent to rev^^^ which is equivalent to rev^1^1^1\&. See below for a illustration of the usage of this form\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A suffix
\fI^\fR
followed by an object type name enclosed in brace pair (e\&.g\&.
v0\&.99\&.8^{commit}) means the object could be a tag, and dereference the tag recursively until an object of that type is found or the object cannot be dereferenced anymore (in which case, barf)\&.
rev^0
introduced earlier is a short\-hand for
rev^{commit}\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A suffix
\fI^\fR
followed by an empty brace pair (e\&.g\&.
v0\&.99\&.8^{}) means the object could be a tag, and dereference the tag recursively until a non\-tag object is found\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A suffix
\fI^\fR
to a revision parameter followed by a brace pair that contains a text led by a slash (e\&.g\&.
HEAD^{/fix nasty bug}): this is the same as
:/fix nasty bug
syntax below except that it returns the youngest matching commit which is reachable from the ref before
\fI^\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A colon, followed by a slash, followed by a text (e\&.g\&.
:/fix nasty bug): this names a commit whose commit message matches the specified regular expression\&. This name returns the youngest matching commit which is reachable from any ref\&. If the commit message starts with a
\fI!\fR, you have to repeat that; the special sequence
\fI:/!\fR, followed by something else than
\fI!\fR
is reserved for now\&. The regular expression can match any part of the commit message\&. To match messages starting with a string, one can use e\&.g\&.
:/^foo\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A suffix
\fI:\fR
followed by a path (e\&.g\&.
HEAD:README); this names the blob or tree at the given path in the tree\-ish object named by the part before the colon\&.
\fI:path\fR
(with an empty part before the colon, e\&.g\&.
:README) is a special case of the syntax described next: content recorded in the index at the given path\&. A path starting with
\fI\&./\fR
or
\fI\&.\&./\fR
is relative to current working directory\&. The given path will be converted to be relative to working tree\(cqs root directory\&. This is most useful to address a blob or tree from a commit or tree that has the same tree structure with the working tree\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A colon, optionally followed by a stage number (0 to 3) and a colon, followed by a path (e\&.g\&.
:0:README); this names a blob object in the index at the given path\&. Missing stage number (and the colon that follows it, e\&.g\&.
:README) names a stage 0 entry\&. During a merge, stage 1 is the common ancestor, stage 2 is the target branch\(cqs version (typically the current branch), and stage 3 is the version from the branch being merged\&.
.RE
.sp
Here is an illustration, by Jon Loeliger\&. Both commit nodes B and C are parents of commit node A\&. Parent commits are ordered left\-to\-right\&.
.sp
.if n \{\
.RS 4
.\}
.nf
G   H   I   J
 \e /     \e /
  D   E   F
   \e  |  / \e
    \e | /   |
     \e|/    |
      B     C
       \e   /
        \e /
         A
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A =      = A^0
B = A^   = A^1     = A~1
C = A^2  = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2
.fi
.if n \{\
.RE
.\}
.SH "SPECIFYING RANGES"
.sp
History traversing commands such as \fIgit log\fR operate on a set of commits, not just a single commit\&. To these commands, specifying a single revision with the notation described in the previous section means the set of commits reachable from that commit, following the commit ancestry chain\&.
.sp
To exclude commits reachable from a commit, a prefix ^ notation is used\&. E\&.g\&. ^r1 r2 means commits reachable from r2 but exclude the ones reachable from r1\&.
.sp
This set operation appears so often that there is a shorthand for it\&. When you have two commits r1 and r2 (named according to the syntax explained in SPECIFYING REVISIONS above), you can ask for commits that are reachable from r2 excluding those that are reachable from r1 by ^r1 r2 and it can be written as r1\&.\&.r2\&.
.sp
A similar notation r1\&.\&.\&.r2 is called symmetric difference of r1 and r2 and is defined as r1 r2 \-\-not $(git merge\-base \-\-all r1 r2)\&. It is the set of commits that are reachable from either one of r1 or r2 but not from both\&.
.sp
Two other shorthands for naming a set that is formed by a commit and its parent commits exist\&. The r1^@ notation means all parents of r1\&. r1^! includes commit r1 but excludes all of its parents\&.
.sp
Here are a handful of examples:
.sp
.if n \{\
.RS 4
.\}
.nf
D                G H D
D F              G H I J D F
^G D             H D
^D B             E I J F B
B\&.\&.\&.C            G H D E B C
^D B C           E I J F B C
C^@              I J F
F^! D            G H D F
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
\fBgit-rev-parse\fR(1)
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
